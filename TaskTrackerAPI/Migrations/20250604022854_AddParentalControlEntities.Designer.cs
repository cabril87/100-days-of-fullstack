// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskTrackerAPI.Data;

#nullable disable

namespace TaskTrackerAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250604022854_AddParentalControlEntities")]
    partial class AddParentalControlEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskTrackerAPI.Models.Analytics.AnalyticsQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<double>("ExecutionTime")
                        .HasColumnType("float");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("QueryType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AnalyticsQueries");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Analytics.DashboardWidget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WidgetType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DashboardWidgets");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Analytics.DataExportRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("DateRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ExportType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Filters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DataExportRequests");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Analytics.SavedFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("FilterCriteria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("QueryType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SavedFilters");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GeneralAuditLogs");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.BackgroundServices.BackgroundServiceExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("ExecutionTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int?>("RecordsProcessed")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("BackgroundServiceExecutions");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.BackgroundServices.BackgroundServiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("ErrorCount")
                        .HasColumnType("int");

                    b.Property<int>("ExecutionCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsHealthy")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastRun")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("NextRun")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SuccessCount")
                        .HasColumnType("int");

                    b.Property<decimal>("SuccessRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.ToTable("BackgroundServiceStatuses");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.BackgroundServices.SystemMaintenanceNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedServices")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ScheduledEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduledStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.ToTable("SystemMaintenanceNotifications");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.BackgroundServices.SystemOptimizationRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Impact")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImplementationNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ImplementedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsImplemented")
                        .HasColumnType("bit");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Recommendation")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("SystemOptimizationRecommendations");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CustomLayout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.BoardColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsCollapsible")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDoneColumn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int>("MappedStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("TaskLimit")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("BoardColumns");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.BoardSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoRefresh")
                        .HasColumnType("bit");

                    b.Property<int>("AutoRefreshInterval")
                        .HasColumnType("int");

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CustomThemeConfig")
                        .HasColumnType("ntext");

                    b.Property<string>("DefaultSortBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DefaultSortDirection")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("DefaultTaskView")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("EnableDragDrop")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableGamification")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableKeyboardShortcuts")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableRealTimeCollaboration")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableSwimLanes")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableTaskTimer")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableWipLimits")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowAvatars")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowBoardStats")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowCategories")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowColumnCounts")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowDueDates")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowPriority")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowProgressBars")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowSubtasks")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowTaskIds")
                        .HasColumnType("bit");

                    b.Property<string>("SwimLaneGroupBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("BoardId")
                        .IsUnique();

                    b.ToTable("BoardSettings");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.BoardTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AverageRating")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LayoutConfiguration")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PreviewImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("BoardTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "General",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Simple three-column board for basic task management",
                            IsDefault = true,
                            IsPublic = true,
                            LayoutConfiguration = "{\"theme\":\"default\",\"layout\":\"standard\"}",
                            Name = "Basic Kanban",
                            RatingCount = 0,
                            Tags = "kanban,basic,simple",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 2,
                            AverageRating = 4.5m,
                            Category = "Development",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Agile development board with bug tracking and code review columns",
                            IsDefault = true,
                            IsPublic = true,
                            LayoutConfiguration = "{\"theme\":\"developer\",\"layout\":\"extended\"}",
                            Name = "Software Development",
                            RatingCount = 12,
                            Tags = "agile,development,software,scrum",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 3,
                            AverageRating = 4.2m,
                            Category = "Creative",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Board designed for content creators with ideation, writing, and publishing phases",
                            IsDefault = true,
                            IsPublic = true,
                            LayoutConfiguration = "{\"theme\":\"creative\",\"layout\":\"workflow\"}",
                            Name = "Content Creation",
                            RatingCount = 8,
                            Tags = "content,writing,marketing,creative",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 4,
                            AverageRating = 4.7m,
                            Category = "Business",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Comprehensive project management board with detailed workflow stages",
                            IsDefault = true,
                            IsPublic = true,
                            LayoutConfiguration = "{\"theme\":\"professional\",\"layout\":\"detailed\"}",
                            Name = "Project Management",
                            RatingCount = 15,
                            Tags = "project,management,business,workflow",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 5,
                            AverageRating = 4.0m,
                            Category = "Personal",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Simple personal productivity board for daily task management",
                            IsDefault = true,
                            IsPublic = true,
                            LayoutConfiguration = "{\"theme\":\"minimal\",\"layout\":\"simple\"}",
                            Name = "Personal Tasks",
                            RatingCount = 5,
                            Tags = "personal,productivity,daily,tasks",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 6,
                            AverageRating = 4.3m,
                            Category = "Marketing",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Track marketing campaigns from ideation to launch and analysis",
                            IsDefault = false,
                            IsPublic = true,
                            LayoutConfiguration = "{\"theme\":\"marketing\",\"layout\":\"campaign\"}",
                            Name = "Marketing Campaign",
                            RatingCount = 7,
                            Tags = "marketing,campaign,social,advertising",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 7,
                            AverageRating = 4.6m,
                            Category = "Development",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dedicated board for tracking and resolving software bugs",
                            IsDefault = false,
                            IsPublic = true,
                            LayoutConfiguration = "{\"theme\":\"bug-tracker\",\"layout\":\"priority\"}",
                            Name = "Bug Tracking",
                            RatingCount = 11,
                            Tags = "bugs,testing,qa,development",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 8,
                            AverageRating = 4.1m,
                            Category = "Events",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Organize events from initial planning to post-event follow-up",
                            IsDefault = false,
                            IsPublic = true,
                            LayoutConfiguration = "{\"theme\":\"events\",\"layout\":\"timeline\"}",
                            Name = "Event Planning",
                            RatingCount = 6,
                            Tags = "events,planning,coordination,logistics",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UsageCount = 0
                        });
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.BoardTemplateColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsCollapsible")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDoneColumn")
                        .HasColumnType("bit");

                    b.Property<int>("MappedStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("TaskLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoardTemplateId");

                    b.ToTable("BoardTemplateColumns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BoardTemplateId = 1,
                            Color = "#6B7280",
                            Description = "Tasks that need to be started",
                            Icon = "clipboard",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 3,
                            Name = "To Do",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            BoardTemplateId = 1,
                            Color = "#3B82F6",
                            Description = "Tasks currently being worked on",
                            Icon = "play",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "In Progress",
                            Order = 2,
                            TaskLimit = 3
                        },
                        new
                        {
                            Id = 3,
                            BoardTemplateId = 1,
                            Color = "#10B981",
                            Description = "Completed tasks",
                            Icon = "check",
                            IsCollapsible = true,
                            IsDoneColumn = true,
                            MappedStatus = 4,
                            Name = "Done",
                            Order = 3
                        },
                        new
                        {
                            Id = 4,
                            BoardTemplateId = 2,
                            Color = "#6B7280",
                            Description = "Feature requests and bug reports",
                            Icon = "list",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 3,
                            Name = "Backlog",
                            Order = 1
                        },
                        new
                        {
                            Id = 5,
                            BoardTemplateId = 2,
                            Color = "#F59E0B",
                            Description = "Features being coded",
                            Icon = "code",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "In Development",
                            Order = 2,
                            TaskLimit = 2
                        },
                        new
                        {
                            Id = 6,
                            BoardTemplateId = 2,
                            Color = "#8B5CF6",
                            Description = "Code awaiting review",
                            Icon = "eye",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Code Review",
                            Order = 3,
                            TaskLimit = 3
                        },
                        new
                        {
                            Id = 7,
                            BoardTemplateId = 2,
                            Color = "#EF4444",
                            Description = "Features being tested",
                            Icon = "bug",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Testing",
                            Order = 4,
                            TaskLimit = 2
                        },
                        new
                        {
                            Id = 8,
                            BoardTemplateId = 2,
                            Color = "#06B6D4",
                            Description = "Ready for deployment",
                            Icon = "upload",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Deployment",
                            Order = 5,
                            TaskLimit = 1
                        },
                        new
                        {
                            Id = 9,
                            BoardTemplateId = 2,
                            Color = "#10B981",
                            Description = "Completed and deployed",
                            Icon = "check",
                            IsCollapsible = true,
                            IsDoneColumn = true,
                            MappedStatus = 4,
                            Name = "Done",
                            Order = 6
                        },
                        new
                        {
                            Id = 10,
                            BoardTemplateId = 3,
                            Color = "#F59E0B",
                            Description = "Content ideas and concepts",
                            Icon = "lightbulb",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 3,
                            Name = "Ideas",
                            Order = 1
                        },
                        new
                        {
                            Id = 11,
                            BoardTemplateId = 3,
                            Color = "#3B82F6",
                            Description = "Researching and gathering information",
                            Icon = "search",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Research",
                            Order = 2,
                            TaskLimit = 2
                        },
                        new
                        {
                            Id = 12,
                            BoardTemplateId = 3,
                            Color = "#8B5CF6",
                            Description = "Content being written",
                            Icon = "edit",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Writing",
                            Order = 3,
                            TaskLimit = 3
                        },
                        new
                        {
                            Id = 13,
                            BoardTemplateId = 3,
                            Color = "#EF4444",
                            Description = "Content under review",
                            Icon = "eye",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Review",
                            Order = 4,
                            TaskLimit = 2
                        },
                        new
                        {
                            Id = 14,
                            BoardTemplateId = 3,
                            Color = "#10B981",
                            Description = "Published content",
                            Icon = "globe",
                            IsCollapsible = true,
                            IsDoneColumn = true,
                            MappedStatus = 4,
                            Name = "Published",
                            Order = 5
                        },
                        new
                        {
                            Id = 15,
                            BoardTemplateId = 4,
                            Color = "#6B7280",
                            Description = "Project planning and requirements",
                            Icon = "calendar",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 3,
                            Name = "Planning",
                            Order = 1
                        },
                        new
                        {
                            Id = 16,
                            BoardTemplateId = 4,
                            Color = "#3B82F6",
                            Description = "Tasks being executed",
                            Icon = "play",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "In Progress",
                            Order = 2,
                            TaskLimit = 5
                        },
                        new
                        {
                            Id = 17,
                            BoardTemplateId = 4,
                            Color = "#F59E0B",
                            Description = "Work under review",
                            Icon = "eye",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Review",
                            Order = 3,
                            TaskLimit = 3
                        },
                        new
                        {
                            Id = 18,
                            BoardTemplateId = 4,
                            Color = "#EF4444",
                            Description = "Quality assurance and testing",
                            Icon = "shield",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Testing",
                            Order = 4,
                            TaskLimit = 2
                        },
                        new
                        {
                            Id = 19,
                            BoardTemplateId = 4,
                            Color = "#06B6D4",
                            Description = "Approved and ready for deployment",
                            Icon = "checkmark",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Approved",
                            Order = 5,
                            TaskLimit = 1
                        },
                        new
                        {
                            Id = 20,
                            BoardTemplateId = 4,
                            Color = "#10B981",
                            Description = "Project milestones completed",
                            Icon = "trophy",
                            IsCollapsible = true,
                            IsDoneColumn = true,
                            MappedStatus = 4,
                            Name = "Completed",
                            Order = 6
                        },
                        new
                        {
                            Id = 21,
                            BoardTemplateId = 5,
                            Color = "#EF4444",
                            Description = "Tasks for today",
                            Icon = "calendar",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 3,
                            Name = "Today",
                            Order = 1,
                            TaskLimit = 5
                        },
                        new
                        {
                            Id = 22,
                            BoardTemplateId = 5,
                            Color = "#F59E0B",
                            Description = "Tasks for this week",
                            Icon = "clock",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "This Week",
                            Order = 2
                        },
                        new
                        {
                            Id = 23,
                            BoardTemplateId = 5,
                            Color = "#10B981",
                            Description = "Finished tasks",
                            Icon = "check",
                            IsCollapsible = true,
                            IsDoneColumn = true,
                            MappedStatus = 4,
                            Name = "Completed",
                            Order = 3
                        },
                        new
                        {
                            Id = 24,
                            BoardTemplateId = 6,
                            Color = "#F59E0B",
                            Description = "Campaign ideas and brainstorming",
                            Icon = "lightbulb",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 3,
                            Name = "Ideation",
                            Order = 1
                        },
                        new
                        {
                            Id = 25,
                            BoardTemplateId = 6,
                            Color = "#3B82F6",
                            Description = "Campaign planning and strategy",
                            Icon = "calendar",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Planning",
                            Order = 2,
                            TaskLimit = 3
                        },
                        new
                        {
                            Id = 26,
                            BoardTemplateId = 6,
                            Color = "#8B5CF6",
                            Description = "Creating campaign assets",
                            Icon = "edit",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Creation",
                            Order = 3,
                            TaskLimit = 4
                        },
                        new
                        {
                            Id = 27,
                            BoardTemplateId = 6,
                            Color = "#EF4444",
                            Description = "Campaign execution and launch",
                            Icon = "rocket",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Launch",
                            Order = 4,
                            TaskLimit = 2
                        },
                        new
                        {
                            Id = 28,
                            BoardTemplateId = 6,
                            Color = "#10B981",
                            Description = "Campaign analysis and reporting",
                            Icon = "chart",
                            IsCollapsible = true,
                            IsDoneColumn = true,
                            MappedStatus = 4,
                            Name = "Analysis",
                            Order = 5
                        },
                        new
                        {
                            Id = 29,
                            BoardTemplateId = 7,
                            Color = "#EF4444",
                            Description = "Newly reported bugs",
                            Icon = "bug",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 3,
                            Name = "Reported",
                            Order = 1
                        },
                        new
                        {
                            Id = 30,
                            BoardTemplateId = 7,
                            Color = "#F59E0B",
                            Description = "Bugs being investigated",
                            Icon = "search",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Investigating",
                            Order = 2,
                            TaskLimit = 3
                        },
                        new
                        {
                            Id = 31,
                            BoardTemplateId = 7,
                            Color = "#3B82F6",
                            Description = "Bugs being fixed",
                            Icon = "wrench",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Fixing",
                            Order = 3,
                            TaskLimit = 2
                        },
                        new
                        {
                            Id = 32,
                            BoardTemplateId = 7,
                            Color = "#8B5CF6",
                            Description = "Fixes being tested",
                            Icon = "shield",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Testing",
                            Order = 4,
                            TaskLimit = 3
                        },
                        new
                        {
                            Id = 33,
                            BoardTemplateId = 7,
                            Color = "#10B981",
                            Description = "Fixed and verified bugs",
                            Icon = "check",
                            IsCollapsible = true,
                            IsDoneColumn = true,
                            MappedStatus = 4,
                            Name = "Resolved",
                            Order = 5
                        },
                        new
                        {
                            Id = 34,
                            BoardTemplateId = 8,
                            Color = "#F59E0B",
                            Description = "Event concept and initial planning",
                            Icon = "lightbulb",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 3,
                            Name = "Concept",
                            Order = 1
                        },
                        new
                        {
                            Id = 35,
                            BoardTemplateId = 8,
                            Color = "#3B82F6",
                            Description = "Detailed event planning",
                            Icon = "calendar",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Planning",
                            Order = 2,
                            TaskLimit = 5
                        },
                        new
                        {
                            Id = 36,
                            BoardTemplateId = 8,
                            Color = "#8B5CF6",
                            Description = "Event preparation and setup",
                            Icon = "settings",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Preparation",
                            Order = 3,
                            TaskLimit = 4
                        },
                        new
                        {
                            Id = 37,
                            BoardTemplateId = 8,
                            Color = "#EF4444",
                            Description = "Event day execution",
                            Icon = "play",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Execution",
                            Order = 4,
                            TaskLimit = 3
                        },
                        new
                        {
                            Id = 38,
                            BoardTemplateId = 8,
                            Color = "#06B6D4",
                            Description = "Post-event follow-up tasks",
                            Icon = "mail",
                            IsCollapsible = true,
                            IsDoneColumn = false,
                            MappedStatus = 1,
                            Name = "Follow-up",
                            Order = 5,
                            TaskLimit = 2
                        },
                        new
                        {
                            Id = 39,
                            BoardTemplateId = 8,
                            Color = "#10B981",
                            Description = "Event fully completed",
                            Icon = "trophy",
                            IsCollapsible = true,
                            IsDoneColumn = true,
                            MappedStatus = 4,
                            Name = "Completed",
                            Order = 6
                        });
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AdditionalCriteria")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PointReward")
                        .HasColumnType("int");

                    b.Property<int>("PointsRequired")
                        .HasColumnType("int");

                    b.Property<int?>("RewardBadgeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("TargetCount")
                        .HasColumnType("int");

                    b.Property<int?>("TargetEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Challenges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityType = "DailyCompletion",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete 5 tasks in a single day",
                            Difficulty = 2,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Daily Dynamo",
                            PointReward = 50,
                            PointsRequired = 0,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 5
                        },
                        new
                        {
                            Id = 2,
                            ActivityType = "SpeedCompletion",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete 3 tasks within 30 minutes",
                            Difficulty = 3,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Speed Racer",
                            PointReward = 75,
                            PointsRequired = 100,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 3
                        },
                        new
                        {
                            Id = 3,
                            ActivityType = "EarlyCompletion",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete 2 tasks before 9 AM",
                            Difficulty = 2,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Early Bird Special",
                            PointReward = 60,
                            PointsRequired = 50,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 2
                        },
                        new
                        {
                            Id = 4,
                            ActivityType = "LateCompletion",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete 3 tasks after 10 PM",
                            Difficulty = 2,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Night Owl Challenge",
                            PointReward = 55,
                            PointsRequired = 50,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 3
                        },
                        new
                        {
                            Id = 5,
                            ActivityType = "PerfectQuality",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete all tasks with perfect quality today",
                            Difficulty = 3,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Perfect Day",
                            PointReward = 100,
                            PointsRequired = 200,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 1
                        },
                        new
                        {
                            Id = 6,
                            ActivityType = "CategoryDiversity",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete tasks in 3 different categories today",
                            Difficulty = 2,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Category Explorer",
                            PointReward = 70,
                            PointsRequired = 75,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 3
                        },
                        new
                        {
                            Id = 7,
                            ActivityType = "FocusSessions",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete 2 focus sessions today",
                            Difficulty = 2,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Focus Warrior",
                            PointReward = 80,
                            PointsRequired = 100,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 2
                        },
                        new
                        {
                            Id = 8,
                            ActivityType = "HighPriority",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete 3 high-priority tasks today",
                            Difficulty = 3,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Priority Master",
                            PointReward = 90,
                            PointsRequired = 150,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 3
                        },
                        new
                        {
                            Id = 9,
                            ActivityType = "FamilyTasks",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete 3 family tasks today",
                            Difficulty = 2,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Social Butterfly",
                            PointReward = 85,
                            PointsRequired = 100,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 3
                        },
                        new
                        {
                            Id = 10,
                            ActivityType = "SuperSpeed",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete 10 tasks in under 2 hours",
                            Difficulty = 4,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Lightning Fast",
                            PointReward = 150,
                            PointsRequired = 300,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 10
                        },
                        new
                        {
                            Id = 11,
                            ActivityType = "Organization",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create 2 new categories and organize tasks",
                            Difficulty = 2,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Organizer Supreme",
                            PointReward = 95,
                            PointsRequired = 75,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 2
                        },
                        new
                        {
                            Id = 12,
                            ActivityType = "TemplateCreation",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create 1 task template today",
                            Difficulty = 2,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Template Creator",
                            PointReward = 65,
                            PointsRequired = 50,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 1
                        },
                        new
                        {
                            Id = 13,
                            ActivityType = "Documentation",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Add detailed notes to 5 tasks today",
                            Difficulty = 2,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Note Taker",
                            PointReward = 75,
                            PointsRequired = 75,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 5
                        },
                        new
                        {
                            Id = 14,
                            ActivityType = "BoardUsage",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Organize 10 tasks using boards today",
                            Difficulty = 2,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Board Master",
                            PointReward = 80,
                            PointsRequired = 100,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 10
                        },
                        new
                        {
                            Id = 15,
                            ActivityType = "ReminderSetting",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Set 5 reminders for future tasks",
                            Difficulty = 2,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Reminder Pro",
                            PointReward = 60,
                            PointsRequired = 50,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 5
                        },
                        new
                        {
                            Id = 16,
                            ActivityType = "WeeklyCompletion",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete 25 tasks in a week",
                            Difficulty = 3,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Weekly Warrior",
                            PointReward = 200,
                            PointsRequired = 500,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 25
                        },
                        new
                        {
                            Id = 17,
                            ActivityType = "ConsistentDaily",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete at least 1 task every day for a week",
                            Difficulty = 3,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Consistency King",
                            PointReward = 250,
                            PointsRequired = 300,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 7
                        },
                        new
                        {
                            Id = 18,
                            ActivityType = "WeeklySpeed",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete 50 tasks in under 5 minutes each this week",
                            Difficulty = 4,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Speed Week",
                            PointReward = 400,
                            PointsRequired = 1000,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 50
                        },
                        new
                        {
                            Id = 19,
                            ActivityType = "WeeklyPerfection",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete all tasks with perfect quality for a week",
                            Difficulty = 5,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Perfect Week",
                            PointReward = 500,
                            PointsRequired = 1500,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 7
                        },
                        new
                        {
                            Id = 20,
                            ActivityType = "WeeklyLeader",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lead family leaderboard for a week",
                            Difficulty = 4,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Family Champion",
                            PointReward = 350,
                            PointsRequired = 800,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 7
                        },
                        new
                        {
                            Id = 21,
                            ActivityType = "WeeklyFocus",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete 20 focus sessions this week",
                            Difficulty = 3,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Focus Master",
                            PointReward = 300,
                            PointsRequired = 600,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 20
                        },
                        new
                        {
                            Id = 22,
                            ActivityType = "CategoryMastery",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete tasks in 10 different categories this week",
                            Difficulty = 3,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Category Conqueror",
                            PointReward = 275,
                            PointsRequired = 400,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 10
                        },
                        new
                        {
                            Id = 23,
                            ActivityType = "WeeklyPriority",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete 20 high-priority tasks this week",
                            Difficulty = 3,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Priority Pro",
                            PointReward = 325,
                            PointsRequired = 500,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 20
                        },
                        new
                        {
                            Id = 24,
                            ActivityType = "WeeklyEarly",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete 15 tasks before 9 AM this week",
                            Difficulty = 3,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Early Bird Week",
                            PointReward = 280,
                            PointsRequired = 350,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 15
                        },
                        new
                        {
                            Id = 25,
                            ActivityType = "WeeklyCollaboration",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Help family complete 15 tasks this week",
                            Difficulty = 3,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Collaboration Master",
                            PointReward = 290,
                            PointsRequired = 400,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 15
                        },
                        new
                        {
                            Id = 26,
                            ActivityType = "WeeklyTemplates",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create 5 task templates this week",
                            Difficulty = 2,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Template Week",
                            PointReward = 220,
                            PointsRequired = 250,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 5
                        },
                        new
                        {
                            Id = 27,
                            ActivityType = "WeeklyOrganization",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create 10 categories and organize perfectly",
                            Difficulty = 3,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Organization Week",
                            PointReward = 240,
                            PointsRequired = 300,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 10
                        },
                        new
                        {
                            Id = 28,
                            ActivityType = "WeeklyBoards",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create and organize 5 boards this week",
                            Difficulty = 3,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Board Architect",
                            PointReward = 260,
                            PointsRequired = 350,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 5
                        },
                        new
                        {
                            Id = 29,
                            ActivityType = "WeeklyDocumentation",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Add comprehensive notes to 25 tasks",
                            Difficulty = 2,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Documentation Week",
                            PointReward = 230,
                            PointsRequired = 200,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 25
                        },
                        new
                        {
                            Id = 30,
                            ActivityType = "WeeklyAutomation",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Set up 10 recurring tasks this week",
                            Difficulty = 3,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Automation Week",
                            PointReward = 270,
                            PointsRequired = 400,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 10
                        },
                        new
                        {
                            Id = 31,
                            ActivityType = "MonthlyCompletion",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete 100 tasks in a month",
                            Difficulty = 4,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Monthly Master",
                            PointReward = 500,
                            PointsRequired = 0,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 100
                        },
                        new
                        {
                            Id = 32,
                            ActivityType = "StreakMaintenance",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Maintain a 30-day streak",
                            Difficulty = 4,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Streak Legend",
                            PointReward = 750,
                            PointsRequired = 0,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 30
                        },
                        new
                        {
                            Id = 33,
                            ActivityType = "MonthlyPerfection",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Perfect quality for entire month",
                            Difficulty = 5,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Monthly Perfectionist",
                            PointReward = 1000,
                            PointsRequired = 0,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 30
                        },
                        new
                        {
                            Id = 34,
                            ActivityType = "MonthlySpeed",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete 200 tasks in under 5 minutes each",
                            Difficulty = 4,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Speed Month",
                            PointReward = 800,
                            PointsRequired = 0,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 200
                        },
                        new
                        {
                            Id = 35,
                            ActivityType = "MonthlyDominance",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lead family for entire month",
                            Difficulty = 5,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Family Emperor",
                            PointReward = 900,
                            PointsRequired = 0,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 30
                        },
                        new
                        {
                            Id = 36,
                            ActivityType = "MonthlyFocus",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete 100 focus sessions in a month",
                            Difficulty = 4,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Focus Transcendence",
                            PointReward = 700,
                            PointsRequired = 0,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 100
                        },
                        new
                        {
                            Id = 37,
                            ActivityType = "MonthlySystemBuilding",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create comprehensive productivity system",
                            Difficulty = 4,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "System Architect",
                            PointReward = 600,
                            PointsRequired = 0,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 1
                        },
                        new
                        {
                            Id = 38,
                            ActivityType = "MonthlyInnovation",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create 50 unique tasks and templates",
                            Difficulty = 3,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Innovation Master",
                            PointReward = 650,
                            PointsRequired = 0,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 50
                        },
                        new
                        {
                            Id = 39,
                            ActivityType = "MonthlyCommunity",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Help 50 family members achieve their goals",
                            Difficulty = 4,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Community Builder",
                            PointReward = 850,
                            PointsRequired = 0,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 50
                        },
                        new
                        {
                            Id = 40,
                            ActivityType = "AchievementUnlock",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unlock 20 different achievements",
                            Difficulty = 5,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Ultimate Achiever",
                            PointReward = 1000,
                            PointsRequired = 0,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetCount = 20
                        });
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.ChallengeProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentProgress")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrolledAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int");

                    b.Property<int>("TasksCompleted")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("ChallengeProgresses");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.ChecklistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("ChecklistItems");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.ChecklistTemplateItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("TaskTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("TaskTemplateId");

                    b.ToTable("ChecklistTemplateItems");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Distraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FocusSessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("FocusSessionId");

                    b.ToTable("Distractions");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FailedLoginAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AttemptTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("EmailOrUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsSuspicious")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("RiskFactors")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("FailedLoginAttempts");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Family", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FamilyId")
                        .HasColumnType("int");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PointValue")
                        .HasColumnType("int");

                    b.Property<int>("ProgressCurrent")
                        .HasColumnType("int");

                    b.Property<int>("ProgressTarget")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("FamilyAchievements");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyAchievementMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AchievementId")
                        .HasColumnType("int");

                    b.Property<int>("ContributionPoints")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("FamilyMemberId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("FamilyMemberId");

                    b.ToTable("FamilyAchievementMembers");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FamilyId")
                        .HasColumnType("int");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TargetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("TargetId");

                    b.ToTable("FamilyActivities");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyCalendarEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<int>("FamilyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecurrencePattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FamilyId");

                    b.ToTable("FamilyCalendarEvents");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyEventAttendee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("FamilyMemberId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Response")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("FamilyMemberId");

                    b.ToTable("FamilyEventAttendees");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyEventReminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("ReminderMethod")
                        .HasColumnType("int");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimeBeforeInMinutes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("FamilyEventReminders");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FamilyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ProfileCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("Relationship")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("FamilyMembers");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyMemberAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("FamilyMemberId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RecurrencePattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("FamilyMemberId");

                    b.ToTable("FamilyMemberAvailabilities");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.ToTable("FamilyRoles");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyRolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("FamilyRolePermissions");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FocusSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompletionNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SessionQualityRating")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TaskCompletedDuringSession")
                        .HasColumnType("bit");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("TaskProgressAfter")
                        .HasColumnType("int");

                    b.Property<int>("TaskProgressBefore")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("FocusSessions");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Gamification.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int?>("FamilyId")
                        .HasColumnType("int");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PointValue")
                        .HasColumnType("int");

                    b.Property<int>("Scope")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "First Steps",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete your very first task",
                            Difficulty = 0,
                            IconUrl = "/icons/achievements/bronze-first-task.svg",
                            IsDeleted = false,
                            Name = "First Steps",
                            PointValue = 10,
                            Scope = 0
                        },
                        new
                        {
                            Id = 2,
                            Category = "Progress",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 5 tasks",
                            Difficulty = 0,
                            IconUrl = "/icons/achievements/bronze-task-starter.svg",
                            IsDeleted = false,
                            Name = "Task Starter",
                            PointValue = 25,
                            Scope = 0
                        },
                        new
                        {
                            Id = 3,
                            Category = "Progress",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 10 tasks",
                            Difficulty = 0,
                            IconUrl = "/icons/achievements/bronze-getting-started.svg",
                            IsDeleted = false,
                            Name = "Getting Started",
                            PointValue = 50,
                            Scope = 0
                        },
                        new
                        {
                            Id = 4,
                            Category = "Creation",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Create your first task",
                            Difficulty = 0,
                            IconUrl = "/icons/achievements/bronze-creator.svg",
                            IsDeleted = false,
                            Name = "Creator",
                            PointValue = 15,
                            Scope = 0
                        },
                        new
                        {
                            Id = 5,
                            Category = "Organization",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Create your first category",
                            Difficulty = 0,
                            IconUrl = "/icons/achievements/bronze-organizer.svg",
                            IsDeleted = false,
                            Name = "Organizer",
                            PointValue = 10,
                            Scope = 0
                        },
                        new
                        {
                            Id = 6,
                            Category = "Time Management",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete a task before 8 AM",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-early-bird.svg",
                            IsDeleted = false,
                            Name = "Early Bird",
                            PointValue = 20,
                            Scope = 0
                        },
                        new
                        {
                            Id = 7,
                            Category = "Time Management",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete a task after 10 PM",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-night-owl.svg",
                            IsDeleted = false,
                            Name = "Night Owl",
                            PointValue = 15,
                            Scope = 0
                        },
                        new
                        {
                            Id = 8,
                            Category = "Dedication",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 5 tasks on weekends",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-weekend-warrior.svg",
                            IsDeleted = false,
                            Name = "Weekend Warrior",
                            PointValue = 30,
                            Scope = 0
                        },
                        new
                        {
                            Id = 9,
                            Category = "Time Management",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 3 tasks during lunch break",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-lunch-hero.svg",
                            IsDeleted = false,
                            Name = "Lunch Break Hero",
                            PointValue = 25,
                            Scope = 0
                        },
                        new
                        {
                            Id = 10,
                            Category = "Punctuality",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 5 tasks before their due date",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-on-time.svg",
                            IsDeleted = false,
                            Name = "On Time",
                            PointValue = 40,
                            Scope = 0
                        },
                        new
                        {
                            Id = 11,
                            Category = "Speed",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete a task in under 5 minutes",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-speed-runner.svg",
                            IsDeleted = false,
                            Name = "Speed Runner",
                            PointValue = 15,
                            Scope = 0
                        },
                        new
                        {
                            Id = 12,
                            Category = "Speed",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 3 tasks in under 10 minutes each",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-quick-draw.svg",
                            IsDeleted = false,
                            Name = "Quick Draw",
                            PointValue = 35,
                            Scope = 0
                        },
                        new
                        {
                            Id = 13,
                            Category = "Speed",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 5 tasks in under 15 minutes total",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/bronze-flash.svg",
                            IsDeleted = false,
                            Name = "Flash",
                            PointValue = 50,
                            Scope = 0
                        },
                        new
                        {
                            Id = 14,
                            Category = "Consistency",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete tasks for 3 consecutive days",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-streak-start.svg",
                            IsDeleted = false,
                            Name = "Streak Starter",
                            PointValue = 30,
                            Scope = 0
                        },
                        new
                        {
                            Id = 15,
                            Category = "Consistency",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete at least 1 task every day for 5 days",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-daily-dose.svg",
                            IsDeleted = false,
                            Name = "Daily Dose",
                            PointValue = 50,
                            Scope = 0
                        },
                        new
                        {
                            Id = 16,
                            Category = "Habits",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete morning tasks 5 days in a row",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-morning-routine.svg",
                            IsDeleted = false,
                            Name = "Morning Routine",
                            PointValue = 45,
                            Scope = 0
                        },
                        new
                        {
                            Id = 17,
                            Category = "Social",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Join your first family",
                            Difficulty = 0,
                            IconUrl = "/icons/achievements/bronze-team-player.svg",
                            IsDeleted = false,
                            Name = "Team Player",
                            PointValue = 25,
                            Scope = 0
                        },
                        new
                        {
                            Id = 18,
                            Category = "Collaboration",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 3 family tasks",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-helpful.svg",
                            IsDeleted = false,
                            Name = "Helpful",
                            PointValue = 35,
                            Scope = 0
                        },
                        new
                        {
                            Id = 19,
                            Category = "Social",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Create your first family event",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-event-organizer.svg",
                            IsDeleted = false,
                            Name = "Event Organizer",
                            PointValue = 30,
                            Scope = 0
                        },
                        new
                        {
                            Id = 20,
                            Category = "Learning",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Try 3 different task priorities",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-experimenter.svg",
                            IsDeleted = false,
                            Name = "Experimenter",
                            PointValue = 20,
                            Scope = 0
                        },
                        new
                        {
                            Id = 21,
                            Category = "Focus",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete your first focus session",
                            Difficulty = 0,
                            IconUrl = "/icons/achievements/bronze-focused.svg",
                            IsDeleted = false,
                            Name = "Focused",
                            PointValue = 25,
                            Scope = 0
                        },
                        new
                        {
                            Id = 22,
                            Category = "Focus",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 5 focus sessions",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-zen-master.svg",
                            IsDeleted = false,
                            Name = "Zen Master",
                            PointValue = 75,
                            Scope = 0
                        },
                        new
                        {
                            Id = 23,
                            Category = "Resilience",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Return after 7 days of inactivity",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-comeback-kid.svg",
                            IsDeleted = false,
                            Name = "Comeback Kid",
                            PointValue = 50,
                            Scope = 0
                        },
                        new
                        {
                            Id = 24,
                            Category = "Quality",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 5 tasks with perfect quality",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/bronze-perfectionist.svg",
                            IsDeleted = false,
                            Name = "Perfectionist",
                            PointValue = 60,
                            Scope = 0
                        },
                        new
                        {
                            Id = 25,
                            Category = "Versatility",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Work on 3 different categories in one day",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-multi-tasker.svg",
                            IsDeleted = false,
                            Name = "Multi-tasker",
                            PointValue = 30,
                            Scope = 0
                        },
                        new
                        {
                            Id = 26,
                            Category = "Seasonal",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 10 tasks in January",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/bronze-new-year.svg",
                            IsDeleted = false,
                            Name = "New Year Resolution",
                            PointValue = 100,
                            Scope = 0
                        },
                        new
                        {
                            Id = 27,
                            Category = "Seasonal",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 15 organization tasks in March",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/bronze-spring-cleaning.svg",
                            IsDeleted = false,
                            Name = "Spring Cleaning",
                            PointValue = 75,
                            Scope = 0
                        },
                        new
                        {
                            Id = 28,
                            Category = "Seasonal",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 20 tasks in summer months",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/bronze-summer-vibes.svg",
                            IsDeleted = false,
                            Name = "Summer Vibes",
                            PointValue = 80,
                            Scope = 0
                        },
                        new
                        {
                            Id = 29,
                            Category = "Efficiency",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Use task templates 10 times",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-template-master.svg",
                            IsDeleted = false,
                            Name = "Template Master",
                            PointValue = 50,
                            Scope = 0
                        },
                        new
                        {
                            Id = 30,
                            Category = "Automation",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Create 3 recurring tasks",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-automation.svg",
                            IsDeleted = false,
                            Name = "Automation Lover",
                            PointValue = 45,
                            Scope = 0
                        },
                        new
                        {
                            Id = 31,
                            Category = "Milestones",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Use the app for 7 consecutive days",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-first-week.svg",
                            IsDeleted = false,
                            Name = "First Week",
                            PointValue = 70,
                            Scope = 0
                        },
                        new
                        {
                            Id = 32,
                            Category = "Milestones",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Use the app for 30 days total",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/bronze-loyal-user.svg",
                            IsDeleted = false,
                            Name = "Loyal User",
                            PointValue = 150,
                            Scope = 0
                        },
                        new
                        {
                            Id = 33,
                            Category = "Productivity",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 5 tasks in one hour",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/bronze-power-hour.svg",
                            IsDeleted = false,
                            Name = "Power Hour",
                            PointValue = 80,
                            Scope = 0
                        },
                        new
                        {
                            Id = 34,
                            Category = "Progress",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 20 tasks total",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/bronze-task-destroyer.svg",
                            IsDeleted = false,
                            Name = "Task Destroyer",
                            PointValue = 100,
                            Scope = 0
                        },
                        new
                        {
                            Id = 35,
                            Category = "Priority",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 10 high-priority tasks",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/bronze-priority-pro.svg",
                            IsDeleted = false,
                            Name = "Priority Pro",
                            PointValue = 75,
                            Scope = 0
                        },
                        new
                        {
                            Id = 36,
                            Category = "Priority",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 5 critical priority tasks",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/bronze-critical-thinker.svg",
                            IsDeleted = false,
                            Name = "Critical Thinker",
                            PointValue = 100,
                            Scope = 0
                        },
                        new
                        {
                            Id = 37,
                            Category = "Organization",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Create 5 different categories",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-category-creator.svg",
                            IsDeleted = false,
                            Name = "Category Creator",
                            PointValue = 50,
                            Scope = 0
                        },
                        new
                        {
                            Id = 38,
                            Category = "Organization",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Use 10 different tags",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-tag-master.svg",
                            IsDeleted = false,
                            Name = "Tag Master",
                            PointValue = 40,
                            Scope = 0
                        },
                        new
                        {
                            Id = 39,
                            Category = "Planning",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Set your first reminder",
                            Difficulty = 0,
                            IconUrl = "/icons/achievements/bronze-reminder-rookie.svg",
                            IsDeleted = false,
                            Name = "Reminder Rookie",
                            PointValue = 15,
                            Scope = 0
                        },
                        new
                        {
                            Id = 40,
                            Category = "Planning",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Set 10 reminders",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-planner.svg",
                            IsDeleted = false,
                            Name = "Planner",
                            PointValue = 50,
                            Scope = 0
                        },
                        new
                        {
                            Id = 41,
                            Category = "Documentation",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Add notes to 5 tasks",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-note-taker.svg",
                            IsDeleted = false,
                            Name = "Note Taker",
                            PointValue = 30,
                            Scope = 0
                        },
                        new
                        {
                            Id = 42,
                            Category = "Documentation",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Write notes longer than 100 characters",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-detailed.svg",
                            IsDeleted = false,
                            Name = "Detailed",
                            PointValue = 25,
                            Scope = 0
                        },
                        new
                        {
                            Id = 43,
                            Category = "Visualization",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Create your first board",
                            Difficulty = 0,
                            IconUrl = "/icons/achievements/bronze-board-creator.svg",
                            IsDeleted = false,
                            Name = "Board Creator",
                            PointValue = 30,
                            Scope = 0
                        },
                        new
                        {
                            Id = 44,
                            Category = "Visualization",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Move 10 tasks between board columns",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-visual-organizer.svg",
                            IsDeleted = false,
                            Name = "Visual Organizer",
                            PointValue = 40,
                            Scope = 0
                        },
                        new
                        {
                            Id = 45,
                            Category = "Challenges",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Join your first challenge",
                            Difficulty = 0,
                            IconUrl = "/icons/achievements/bronze-challenge-accepted.svg",
                            IsDeleted = false,
                            Name = "Challenge Accepted",
                            PointValue = 25,
                            Scope = 0
                        },
                        new
                        {
                            Id = 46,
                            Category = "Gamification",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Earn your first 100 points",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-point-collector.svg",
                            IsDeleted = false,
                            Name = "Point Collector",
                            PointValue = 0,
                            Scope = 0
                        },
                        new
                        {
                            Id = 47,
                            Category = "Exploration",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Try every main feature once",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/bronze-explorer.svg",
                            IsDeleted = false,
                            Name = "Explorer",
                            PointValue = 100,
                            Scope = 0
                        },
                        new
                        {
                            Id = 48,
                            Category = "Exploration",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Use 5 different app features",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-feature-hunter.svg",
                            IsDeleted = false,
                            Name = "Feature Hunter",
                            PointValue = 50,
                            Scope = 0
                        },
                        new
                        {
                            Id = 49,
                            Category = "Development",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 10 personal development tasks",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/bronze-self-improver.svg",
                            IsDeleted = false,
                            Name = "Self Improver",
                            PointValue = 75,
                            Scope = 0
                        },
                        new
                        {
                            Id = 50,
                            Category = "Habits",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete the same type of task 7 days in a row",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/bronze-habit-builder.svg",
                            IsDeleted = false,
                            Name = "Habit Builder",
                            PointValue = 80,
                            Scope = 0
                        },
                        new
                        {
                            Id = 51,
                            Category = "Progress",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 50 tasks",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-task-warrior.svg",
                            IsDeleted = false,
                            Name = "Task Warrior",
                            PointValue = 150,
                            Scope = 0
                        },
                        new
                        {
                            Id = 52,
                            Category = "Progress",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 100 tasks",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-productive.svg",
                            IsDeleted = false,
                            Name = "Productive",
                            PointValue = 250,
                            Scope = 0
                        },
                        new
                        {
                            Id = 53,
                            Category = "Intensity",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 25 tasks in one week",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-task-machine.svg",
                            IsDeleted = false,
                            Name = "Task Machine",
                            PointValue = 200,
                            Scope = 0
                        },
                        new
                        {
                            Id = 54,
                            Category = "Speed",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 10 tasks in under 5 minutes each",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-lightning-fast.svg",
                            IsDeleted = false,
                            Name = "Lightning Fast",
                            PointValue = 150,
                            Scope = 0
                        },
                        new
                        {
                            Id = 55,
                            Category = "Speed",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 5 tasks within 30 minutes",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-speed-demon.svg",
                            IsDeleted = false,
                            Name = "Speed Demon",
                            PointValue = 120,
                            Scope = 0
                        },
                        new
                        {
                            Id = 56,
                            Category = "Speed",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 15 tasks in 2 hours",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-rapid-fire.svg",
                            IsDeleted = false,
                            Name = "Rapid Fire",
                            PointValue = 180,
                            Scope = 0
                        },
                        new
                        {
                            Id = 57,
                            Category = "Consistency",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Maintain a 14-day streak",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-flame-keeper.svg",
                            IsDeleted = false,
                            Name = "Flame Keeper",
                            PointValue = 200,
                            Scope = 0
                        },
                        new
                        {
                            Id = 58,
                            Category = "Consistency",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete tasks every day for 21 days",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-dedicated.svg",
                            IsDeleted = false,
                            Name = "Dedicated",
                            PointValue = 300,
                            Scope = 0
                        },
                        new
                        {
                            Id = 59,
                            Category = "Habits",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete morning tasks for 14 days straight",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-morning-champion.svg",
                            IsDeleted = false,
                            Name = "Morning Champion",
                            PointValue = 250,
                            Scope = 0
                        },
                        new
                        {
                            Id = 60,
                            Category = "Time Management",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete tasks on time for 10 consecutive days",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-time-master.svg",
                            IsDeleted = false,
                            Name = "Time Master",
                            PointValue = 200,
                            Scope = 0
                        },
                        new
                        {
                            Id = 61,
                            Category = "Punctuality",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 50 tasks before their due date",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-punctuality-expert.svg",
                            IsDeleted = false,
                            Name = "Punctuality Expert",
                            PointValue = 300,
                            Scope = 0
                        },
                        new
                        {
                            Id = 62,
                            Category = "Time Management",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 25 tasks before 8 AM",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-early-bird-master.svg",
                            IsDeleted = false,
                            Name = "Early Bird Master",
                            PointValue = 250,
                            Scope = 0
                        },
                        new
                        {
                            Id = 63,
                            Category = "Collaboration",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 25 family tasks",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-team-player.svg",
                            IsDeleted = false,
                            Name = "Team Player",
                            PointValue = 200,
                            Scope = 0
                        },
                        new
                        {
                            Id = 64,
                            Category = "Collaboration",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Help family members complete 15 tasks",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-family-hero.svg",
                            IsDeleted = false,
                            Name = "Family Hero",
                            PointValue = 180,
                            Scope = 0
                        },
                        new
                        {
                            Id = 65,
                            Category = "Social",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Organize 10 family events",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-event-master.svg",
                            IsDeleted = false,
                            Name = "Event Master",
                            PointValue = 300,
                            Scope = 0
                        },
                        new
                        {
                            Id = 66,
                            Category = "Social",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Invite 5 people to join families",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-community-builder.svg",
                            IsDeleted = false,
                            Name = "Community Builder",
                            PointValue = 250,
                            Scope = 0
                        },
                        new
                        {
                            Id = 67,
                            Category = "Quality",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 25 tasks with perfect quality",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-quality-control.svg",
                            IsDeleted = false,
                            Name = "Quality Control",
                            PointValue = 300,
                            Scope = 0
                        },
                        new
                        {
                            Id = 68,
                            Category = "Documentation",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Add detailed notes to 25 tasks",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-attention-detail.svg",
                            IsDeleted = false,
                            Name = "Attention to Detail",
                            PointValue = 200,
                            Scope = 0
                        },
                        new
                        {
                            Id = 69,
                            Category = "Quality",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Review and update 20 completed tasks",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-reviewer.svg",
                            IsDeleted = false,
                            Name = "Reviewer",
                            PointValue = 150,
                            Scope = 0
                        },
                        new
                        {
                            Id = 70,
                            Category = "Innovation",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Create 25 unique tasks",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-innovator.svg",
                            IsDeleted = false,
                            Name = "Innovator",
                            PointValue = 200,
                            Scope = 0
                        },
                        new
                        {
                            Id = 71,
                            Category = "Efficiency",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Create 10 task templates",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-template-creator.svg",
                            IsDeleted = false,
                            Name = "Template Creator",
                            PointValue = 180,
                            Scope = 0
                        },
                        new
                        {
                            Id = 72,
                            Category = "Organization",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Create 15 categories and organize tasks",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-system-builder.svg",
                            IsDeleted = false,
                            Name = "System Builder",
                            PointValue = 220,
                            Scope = 0
                        },
                        new
                        {
                            Id = 73,
                            Category = "Focus",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 25 focus sessions",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-focus-master.svg",
                            IsDeleted = false,
                            Name = "Focus Master",
                            PointValue = 250,
                            Scope = 0
                        },
                        new
                        {
                            Id = 74,
                            Category = "Focus",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 5 focus sessions over 2 hours each",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-deep-work.svg",
                            IsDeleted = false,
                            Name = "Deep Work",
                            PointValue = 300,
                            Scope = 0
                        },
                        new
                        {
                            Id = 75,
                            Category = "Focus",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 100 tasks during focus sessions",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-concentration-champion.svg",
                            IsDeleted = false,
                            Name = "Concentration Champion",
                            PointValue = 400,
                            Scope = 0
                        },
                        new
                        {
                            Id = 76,
                            Category = "Seasonal",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 75 tasks in spring",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-spring-productivity.svg",
                            IsDeleted = false,
                            Name = "Spring Productivity",
                            PointValue = 300,
                            Scope = 0
                        },
                        new
                        {
                            Id = 77,
                            Category = "Seasonal",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Maintain streaks throughout summer",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-summer-consistency.svg",
                            IsDeleted = false,
                            Name = "Summer Consistency",
                            PointValue = 350,
                            Scope = 0
                        },
                        new
                        {
                            Id = 78,
                            Category = "Seasonal",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Reorganize and complete 50 tasks in fall",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-autumn-organizer.svg",
                            IsDeleted = false,
                            Name = "Autumn Organizer",
                            PointValue = 275,
                            Scope = 0
                        },
                        new
                        {
                            Id = 79,
                            Category = "Seasonal",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Stay productive throughout winter",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/silver-winter-warrior.svg",
                            IsDeleted = false,
                            Name = "Winter Warrior",
                            PointValue = 400,
                            Scope = 0
                        },
                        new
                        {
                            Id = 80,
                            Category = "Priority",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 50 high-priority tasks",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-priority-master.svg",
                            IsDeleted = false,
                            Name = "Priority Master",
                            PointValue = 300,
                            Scope = 0
                        },
                        new
                        {
                            Id = 81,
                            Category = "Strategy",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Balance tasks across all priority levels",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-strategic-thinker.svg",
                            IsDeleted = false,
                            Name = "Strategic Thinker",
                            PointValue = 250,
                            Scope = 0
                        },
                        new
                        {
                            Id = 82,
                            Category = "Priority",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 20 critical priority tasks",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-crisis-manager.svg",
                            IsDeleted = false,
                            Name = "Crisis Manager",
                            PointValue = 400,
                            Scope = 0
                        },
                        new
                        {
                            Id = 83,
                            Category = "Automation",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Set up 20 recurring tasks",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-automation-expert.svg",
                            IsDeleted = false,
                            Name = "Automation Expert",
                            PointValue = 300,
                            Scope = 0
                        },
                        new
                        {
                            Id = 84,
                            Category = "Efficiency",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Use templates for 50 task creations",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-efficiency-master.svg",
                            IsDeleted = false,
                            Name = "Efficiency Master",
                            PointValue = 250,
                            Scope = 0
                        },
                        new
                        {
                            Id = 85,
                            Category = "Efficiency",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Save 10 hours using automation features",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/silver-time-saver.svg",
                            IsDeleted = false,
                            Name = "Time Saver",
                            PointValue = 500,
                            Scope = 0
                        },
                        new
                        {
                            Id = 86,
                            Category = "Milestones",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Use the app for 90 consecutive days",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-regular-user.svg",
                            IsDeleted = false,
                            Name = "Regular User",
                            PointValue = 450,
                            Scope = 0
                        },
                        new
                        {
                            Id = 87,
                            Category = "Milestones",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Use the app for 6 months total",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/silver-dedicated-user.svg",
                            IsDeleted = false,
                            Name = "Dedicated User",
                            PointValue = 600,
                            Scope = 0
                        },
                        new
                        {
                            Id = 88,
                            Category = "Gamification",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Earn 1000 total points",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-point-accumulator.svg",
                            IsDeleted = false,
                            Name = "Point Accumulator",
                            PointValue = 0,
                            Scope = 0
                        },
                        new
                        {
                            Id = 89,
                            Category = "Challenges",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 10 different challenges",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-challenge-warrior.svg",
                            IsDeleted = false,
                            Name = "Challenge Warrior",
                            PointValue = 300,
                            Scope = 0
                        },
                        new
                        {
                            Id = 90,
                            Category = "Competition",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Finish in top 3 of family leaderboard 5 times",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-competitor.svg",
                            IsDeleted = false,
                            Name = "Competitor",
                            PointValue = 350,
                            Scope = 0
                        },
                        new
                        {
                            Id = 91,
                            Category = "Competition",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Improve leaderboard position 10 times",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-leaderboard-climber.svg",
                            IsDeleted = false,
                            Name = "Leaderboard Climber",
                            PointValue = 250,
                            Scope = 0
                        },
                        new
                        {
                            Id = 92,
                            Category = "Development",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 50 learning/development tasks",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-growth-mindset.svg",
                            IsDeleted = false,
                            Name = "Growth Mindset",
                            PointValue = 300,
                            Scope = 0
                        },
                        new
                        {
                            Id = 93,
                            Category = "Versatility",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete tasks in 10 different categories",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-skill-builder.svg",
                            IsDeleted = false,
                            Name = "Skill Builder",
                            PointValue = 250,
                            Scope = 0
                        },
                        new
                        {
                            Id = 94,
                            Category = "Habits",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Maintain 5 different habit streaks simultaneously",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/silver-habit-master.svg",
                            IsDeleted = false,
                            Name = "Habit Master",
                            PointValue = 400,
                            Scope = 0
                        },
                        new
                        {
                            Id = 95,
                            Category = "Communication",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Add comments to 50 family tasks",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-communicator.svg",
                            IsDeleted = false,
                            Name = "Communicator",
                            PointValue = 200,
                            Scope = 0
                        },
                        new
                        {
                            Id = 96,
                            Category = "Planning",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Create tasks with comprehensive descriptions",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-detailed-planner.svg",
                            IsDeleted = false,
                            Name = "Detailed Planner",
                            PointValue = 150,
                            Scope = 0
                        },
                        new
                        {
                            Id = 97,
                            Category = "Documentation",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Maintain detailed notes for 3 months",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-knowledge-keeper.svg",
                            IsDeleted = false,
                            Name = "Knowledge Keeper",
                            PointValue = 300,
                            Scope = 0
                        },
                        new
                        {
                            Id = 98,
                            Category = "Visualization",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Create and maintain 10 active boards",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-board-master.svg",
                            IsDeleted = false,
                            Name = "Board Master",
                            PointValue = 250,
                            Scope = 0
                        },
                        new
                        {
                            Id = 99,
                            Category = "Visualization",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Organize 500 tasks using boards",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-visual-thinker.svg",
                            IsDeleted = false,
                            Name = "Visual Thinker",
                            PointValue = 300,
                            Scope = 0
                        },
                        new
                        {
                            Id = 100,
                            Category = "Organization",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Design the perfect productivity workspace",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-workspace-architect.svg",
                            IsDeleted = false,
                            Name = "Workspace Architect",
                            PointValue = 350,
                            Scope = 0
                        },
                        new
                        {
                            Id = 101,
                            Category = "Progress",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 200 tasks",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/gold-champion.svg",
                            IsDeleted = false,
                            Name = "Champion",
                            PointValue = 400,
                            Scope = 0
                        },
                        new
                        {
                            Id = 102,
                            Category = "Progress",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 300 tasks",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-task-master.svg",
                            IsDeleted = false,
                            Name = "Task Master",
                            PointValue = 600,
                            Scope = 0
                        },
                        new
                        {
                            Id = 103,
                            Category = "Intensity",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 50 tasks in one week",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-productivity-beast.svg",
                            IsDeleted = false,
                            Name = "Productivity Beast",
                            PointValue = 500,
                            Scope = 0
                        },
                        new
                        {
                            Id = 104,
                            Category = "Endurance",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 100 tasks in one month",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-marathon-runner.svg",
                            IsDeleted = false,
                            Name = "Marathon Runner",
                            PointValue = 750,
                            Scope = 0
                        },
                        new
                        {
                            Id = 105,
                            Category = "Consistency",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete tasks every day for 50 days",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-unstoppable.svg",
                            IsDeleted = false,
                            Name = "Unstoppable",
                            PointValue = 800,
                            Scope = 0
                        },
                        new
                        {
                            Id = 106,
                            Category = "Speed",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 20 tasks in under 5 minutes each",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/gold-rocket-speed.svg",
                            IsDeleted = false,
                            Name = "Rocket Speed",
                            PointValue = 400,
                            Scope = 0
                        },
                        new
                        {
                            Id = 107,
                            Category = "Speed",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 30 tasks in 1 hour",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-speed-light.svg",
                            IsDeleted = false,
                            Name = "Speed of Light",
                            PointValue = 600,
                            Scope = 0
                        },
                        new
                        {
                            Id = 108,
                            Category = "Speed",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 100 tasks in 4 hours",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-time-warp.svg",
                            IsDeleted = false,
                            Name = "Time Warp",
                            PointValue = 800,
                            Scope = 0
                        },
                        new
                        {
                            Id = 109,
                            Category = "Consistency",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Maintain a 30-day streak",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/gold-campfire.svg",
                            IsDeleted = false,
                            Name = "Campfire",
                            PointValue = 600,
                            Scope = 0
                        },
                        new
                        {
                            Id = 110,
                            Category = "Consistency",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Maintain a 60-day streak",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-bonfire.svg",
                            IsDeleted = false,
                            Name = "Bonfire",
                            PointValue = 900,
                            Scope = 0
                        },
                        new
                        {
                            Id = 111,
                            Category = "Consistency",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Maintain a 90-day streak",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-wildfire.svg",
                            IsDeleted = false,
                            Name = "Wildfire",
                            PointValue = 1200,
                            Scope = 0
                        },
                        new
                        {
                            Id = 112,
                            Category = "Quality",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 50 tasks with perfect quality",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/gold-perfectionist.svg",
                            IsDeleted = false,
                            Name = "Perfectionist",
                            PointValue = 500,
                            Scope = 0
                        },
                        new
                        {
                            Id = 113,
                            Category = "Quality",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Maintain perfect quality for 30 days",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-quality-assurance.svg",
                            IsDeleted = false,
                            Name = "Quality Assurance",
                            PointValue = 700,
                            Scope = 0
                        },
                        new
                        {
                            Id = 114,
                            Category = "Quality",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Perfect 100 tasks with detailed notes",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-craftsman.svg",
                            IsDeleted = false,
                            Name = "Craftsman",
                            PointValue = 800,
                            Scope = 0
                        },
                        new
                        {
                            Id = 115,
                            Category = "Leadership",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Lead family productivity for 14 days",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/gold-leader.svg",
                            IsDeleted = false,
                            Name = "Leader",
                            PointValue = 600,
                            Scope = 0
                        },
                        new
                        {
                            Id = 116,
                            Category = "Leadership",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Help 10 family members achieve streaks",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-mentor.svg",
                            IsDeleted = false,
                            Name = "Mentor",
                            PointValue = 700,
                            Scope = 0
                        },
                        new
                        {
                            Id = 117,
                            Category = "Community",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Build a family of 20+ active members",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-community-champion.svg",
                            IsDeleted = false,
                            Name = "Community Champion",
                            PointValue = 1000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 118,
                            Category = "Creation",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Create 100 unique tasks",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/gold-master-creator.svg",
                            IsDeleted = false,
                            Name = "Master Creator",
                            PointValue = 500,
                            Scope = 0
                        },
                        new
                        {
                            Id = 119,
                            Category = "Organization",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Design comprehensive productivity systems",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-system-architect.svg",
                            IsDeleted = false,
                            Name = "System Architect",
                            PointValue = 800,
                            Scope = 0
                        },
                        new
                        {
                            Id = 120,
                            Category = "Efficiency",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Create 50 helpful templates",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/gold-template-wizard.svg",
                            IsDeleted = false,
                            Name = "Template Wizard",
                            PointValue = 600,
                            Scope = 0
                        },
                        new
                        {
                            Id = 121,
                            Category = "Focus",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 100 focus sessions",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/gold-deep-focus.svg",
                            IsDeleted = false,
                            Name = "Deep Focus",
                            PointValue = 700,
                            Scope = 0
                        },
                        new
                        {
                            Id = 122,
                            Category = "Focus",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 50 hours of focus time",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-meditation-master.svg",
                            IsDeleted = false,
                            Name = "Meditation Master",
                            PointValue = 900,
                            Scope = 0
                        },
                        new
                        {
                            Id = 123,
                            Category = "Focus",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Maintain focus sessions for 60 days",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-zen-garden.svg",
                            IsDeleted = false,
                            Name = "Zen Garden",
                            PointValue = 1000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 124,
                            Category = "Time Mastery",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Master time across all dimensions",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-time-lord.svg",
                            IsDeleted = false,
                            Name = "Time Lord",
                            PointValue = 3000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 125,
                            Category = "Time Mastery",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Control time itself",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-chronos.svg",
                            IsDeleted = false,
                            Name = "Chronos",
                            PointValue = 5000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 126,
                            Category = "Time Mastery",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Rule over all time and space",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-temporal-sovereign.svg",
                            IsDeleted = false,
                            Name = "Temporal Sovereign",
                            PointValue = 8000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 127,
                            Category = "Competition",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Win 50 competitions",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-champion-champions.svg",
                            IsDeleted = false,
                            Name = "Champion of Champions",
                            PointValue = 2500,
                            Scope = 0
                        },
                        new
                        {
                            Id = 128,
                            Category = "Dominance",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Never lose a competition for a year",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-undefeated.svg",
                            IsDeleted = false,
                            Name = "Undefeated",
                            PointValue = 4000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 129,
                            Category = "Dominance",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Achieve impossible victory records",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-god-mode.svg",
                            IsDeleted = false,
                            Name = "God Mode",
                            PointValue = 7500,
                            Scope = 0
                        },
                        new
                        {
                            Id = 130,
                            Category = "Teaching",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Teach 100 people productivity",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-productivity-sensei.svg",
                            IsDeleted = false,
                            Name = "Productivity Sensei",
                            PointValue = 3000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 131,
                            Category = "Wisdom",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Preserve and share ancient wisdom",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-wisdom-keeper.svg",
                            IsDeleted = false,
                            Name = "Wisdom Keeper",
                            PointValue = 4500,
                            Scope = 0
                        },
                        new
                        {
                            Id = 132,
                            Category = "Enlightenment",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Achieve productivity enlightenment",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-enlightened-one.svg",
                            IsDeleted = false,
                            Name = "Enlightened One",
                            PointValue = 7500,
                            Scope = 0
                        },
                        new
                        {
                            Id = 133,
                            Category = "Legend",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 500 tasks",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-legend.svg",
                            IsDeleted = false,
                            Name = "Legend",
                            PointValue = 1500,
                            Scope = 0
                        },
                        new
                        {
                            Id = 134,
                            Category = "Legend",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 750 tasks",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-myth.svg",
                            IsDeleted = false,
                            Name = "Myth",
                            PointValue = 2000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 135,
                            Category = "Legend",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 1000 tasks",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-epic.svg",
                            IsDeleted = false,
                            Name = "Epic",
                            PointValue = 3000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 136,
                            Category = "Speed Mastery",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Complete 50 tasks in a single day",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-speed-demon.svg",
                            IsDeleted = false,
                            Name = "Speed Demon",
                            PointValue = 2000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 137,
                            Category = "Speed Mastery",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Maintain extreme speed for 30 days",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-velocity.svg",
                            IsDeleted = false,
                            Name = "Velocity",
                            PointValue = 2500,
                            Scope = 0
                        },
                        new
                        {
                            Id = 138,
                            Category = "Speed Mastery",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Achieve impossible speed records",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-hypersonic.svg",
                            IsDeleted = false,
                            Name = "Hypersonic",
                            PointValue = 3000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 139,
                            Category = "Endurance",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Maintain a 180-day streak",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-eternal-flame.svg",
                            IsDeleted = false,
                            Name = "Eternal Flame",
                            PointValue = 3000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 140,
                            Category = "Endurance",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Maintain a 365-day streak",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-immortal.svg",
                            IsDeleted = false,
                            Name = "Immortal",
                            PointValue = 5000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 141,
                            Category = "Endurance",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Never miss a day for 2 years",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-unbreakable.svg",
                            IsDeleted = false,
                            Name = "Unbreakable",
                            PointValue = 10000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 142,
                            Category = "Excellence",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Perfect quality in 200 tasks",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-perfectionist.svg",
                            IsDeleted = false,
                            Name = "Platinum Perfectionist",
                            PointValue = 2000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 143,
                            Category = "Excellence",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Perfect everything you touch",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-flawless.svg",
                            IsDeleted = false,
                            Name = "Flawless",
                            PointValue = 3000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 144,
                            Category = "Excellence",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Transcend human quality limits",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-divine-quality.svg",
                            IsDeleted = false,
                            Name = "Divine Quality",
                            PointValue = 5000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 145,
                            Category = "Empire",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Lead 1000 family members",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-family-emperor.svg",
                            IsDeleted = false,
                            Name = "Family Emperor",
                            PointValue = 15000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 146,
                            Category = "Global",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Impact productivity worldwide",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-global-influence.svg",
                            IsDeleted = false,
                            Name = "Global Influence",
                            PointValue = 25000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 147,
                            Category = "Legacy",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Create new productive civilizations",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-civilization-builder.svg",
                            IsDeleted = false,
                            Name = "Civilization Builder",
                            PointValue = 50000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 148,
                            Category = "Creation God",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Create productivity universes",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-universe-creator.svg",
                            IsDeleted = false,
                            Name = "Universe Creator",
                            PointValue = 20000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 149,
                            Category = "Divine Creation",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Design new realities",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-reality-architect.svg",
                            IsDeleted = false,
                            Name = "Reality Architect",
                            PointValue = 40000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 150,
                            Category = "Omnipotence",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Control infinite universes",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/platinum-multiverse-master.svg",
                            IsDeleted = false,
                            Name = "Multiverse Master",
                            PointValue = 100000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 151,
                            Category = "Transcendence",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Transcend all known limits",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/onyx-transcendent.svg",
                            IsDeleted = false,
                            Name = "Transcendent",
                            PointValue = 100000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 152,
                            Category = "Origin",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Become the source of all productivity",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/onyx-source-code.svg",
                            IsDeleted = false,
                            Name = "Source Code",
                            PointValue = 250000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 153,
                            Category = "Unity",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Achieve unity with productivity itself",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/onyx-one.svg",
                            IsDeleted = false,
                            Name = "One",
                            PointValue = 500000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 154,
                            Category = "Transcendence",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Walk between realities",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/onyx-void-walker.svg",
                            IsDeleted = false,
                            Name = "Void Walker",
                            PointValue = 750000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 155,
                            Category = "Absolute",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Become the absolute form of productivity",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/onyx-absolute.svg",
                            IsDeleted = false,
                            Name = "The Absolute",
                            PointValue = 1000000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 156,
                            Category = "Smart Scheduling",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Use smart scheduling suggestions 5 times",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-smart-scheduler.svg",
                            IsDeleted = false,
                            Name = "Smart Scheduler",
                            PointValue = 50,
                            Scope = 0
                        },
                        new
                        {
                            Id = 157,
                            Category = "Conflict Resolution",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Resolve your first scheduling conflict",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-conflict-resolver.svg",
                            IsDeleted = false,
                            Name = "Conflict Resolver",
                            PointValue = 40,
                            Scope = 0
                        },
                        new
                        {
                            Id = 158,
                            Category = "Availability",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Update availability for 7 consecutive days",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/bronze-availability-expert.svg",
                            IsDeleted = false,
                            Name = "Availability Expert",
                            PointValue = 75,
                            Scope = 0
                        },
                        new
                        {
                            Id = 159,
                            Category = "Availability",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Use availability matrix to schedule 3 events",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/bronze-matrix-navigator.svg",
                            IsDeleted = false,
                            Name = "Matrix Navigator",
                            PointValue = 60,
                            Scope = 0
                        },
                        new
                        {
                            Id = 160,
                            Category = "Efficiency",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Use bulk calendar operations for the first time",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-batch-operator.svg",
                            IsDeleted = false,
                            Name = "Batch Operator",
                            PointValue = 45,
                            Scope = 0
                        },
                        new
                        {
                            Id = 161,
                            Category = "Perfect Scheduling",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Have zero conflicts for 7 consecutive days",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-perfect-scheduler.svg",
                            IsDeleted = false,
                            Name = "Perfect Scheduler",
                            PointValue = 150,
                            Scope = 0
                        },
                        new
                        {
                            Id = 162,
                            Category = "Conflict Resolution",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Successfully resolve 10 scheduling conflicts",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-coordination-champion.svg",
                            IsDeleted = false,
                            Name = "Coordination Champion",
                            PointValue = 200,
                            Scope = 0
                        },
                        new
                        {
                            Id = 163,
                            Category = "Efficiency",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Successfully manage 20+ events in bulk operations",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-batch-master.svg",
                            IsDeleted = false,
                            Name = "Batch Master",
                            PointValue = 175,
                            Scope = 0
                        },
                        new
                        {
                            Id = 164,
                            Category = "Smart Scheduling",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Select optimal time slots 25 times",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-optimal-planner.svg",
                            IsDeleted = false,
                            Name = "Optimal Planner",
                            PointValue = 125,
                            Scope = 0
                        },
                        new
                        {
                            Id = 165,
                            Category = "Family Coordination",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Coordinate 50 family events without conflicts",
                            Difficulty = 3,
                            IconUrl = "/icons/achievements/silver-family-harmonizer.svg",
                            IsDeleted = false,
                            Name = "Family Harmonizer",
                            PointValue = 250,
                            Scope = 0
                        },
                        new
                        {
                            Id = 166,
                            Category = "Analytics",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Use scheduling analytics dashboard 10 times",
                            Difficulty = 1,
                            IconUrl = "/icons/achievements/bronze-analytics-explorer.svg",
                            IsDeleted = false,
                            Name = "Analytics Explorer",
                            PointValue = 80,
                            Scope = 0
                        },
                        new
                        {
                            Id = 167,
                            Category = "Analytics",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Discover and use 5 optimal scheduling patterns",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-pattern-master.svg",
                            IsDeleted = false,
                            Name = "Pattern Master",
                            PointValue = 150,
                            Scope = 0
                        },
                        new
                        {
                            Id = 168,
                            Category = "Efficiency",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Achieve 95% scheduling efficiency for a month",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-efficiency-guru.svg",
                            IsDeleted = false,
                            Name = "Efficiency Guru",
                            PointValue = 300,
                            Scope = 0
                        },
                        new
                        {
                            Id = 169,
                            Category = "Recurring Events",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Create your first recurring event",
                            Difficulty = 0,
                            IconUrl = "/icons/achievements/bronze-recurrence-rookie.svg",
                            IsDeleted = false,
                            Name = "Recurrence Rookie",
                            PointValue = 35,
                            Scope = 0
                        },
                        new
                        {
                            Id = 170,
                            Category = "Recurring Events",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Manage 10 different recurring event series",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-series-specialist.svg",
                            IsDeleted = false,
                            Name = "Series Specialist",
                            PointValue = 120,
                            Scope = 0
                        },
                        new
                        {
                            Id = 171,
                            Category = "Integration",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Export family calendar to external systems 5 times",
                            Difficulty = 2,
                            IconUrl = "/icons/achievements/silver-export-master.svg",
                            IsDeleted = false,
                            Name = "Calendar Export Master",
                            PointValue = 90,
                            Scope = 0
                        },
                        new
                        {
                            Id = 172,
                            Category = "Master Coordination",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Coordinate complex multi-family events flawlessly",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-scheduling-mastermind.svg",
                            IsDeleted = false,
                            Name = "Scheduling Mastermind",
                            PointValue = 500,
                            Scope = 0
                        },
                        new
                        {
                            Id = 173,
                            Category = "System Design",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Design perfect scheduling systems for 100+ family members",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-temporal-architect.svg",
                            IsDeleted = false,
                            Name = "Temporal Architect",
                            PointValue = 750,
                            Scope = 0
                        },
                        new
                        {
                            Id = 174,
                            Category = "Perfect Harmony",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Maintain zero conflicts for 90 consecutive days",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-harmony-keeper.svg",
                            IsDeleted = false,
                            Name = "Harmony Keeper",
                            PointValue = 1000,
                            Scope = 0
                        },
                        new
                        {
                            Id = 175,
                            Category = "Calendar Mastery",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "",
                            Description = "Master all advanced calendar features and help others",
                            Difficulty = 4,
                            IconUrl = "/icons/achievements/gold-calendar-sage.svg",
                            IsDeleted = false,
                            Name = "Calendar Sage",
                            PointValue = 800,
                            Scope = 0
                        });
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Gamification.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ColorScheme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PointValue")
                        .HasColumnType("int");

                    b.Property<int>("PointsRequired")
                        .HasColumnType("int");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.ToTable("Badges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Character",
                            ColorScheme = "red-bronze",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 25 high priority tasks",
                            Description = "Complete 25 tasks with high priority",
                            DisplayOrder = 1,
                            IconUrl = "/icons/badges/character-warrior.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Warrior",
                            PointValue = 100,
                            PointsRequired = 0,
                            Rarity = "Common",
                            Tier = "bronze"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Character",
                            ColorScheme = "blue-bronze",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 20 learning tasks",
                            Description = "Complete 20 learning or research tasks",
                            DisplayOrder = 2,
                            IconUrl = "/icons/badges/character-mage.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Mage",
                            PointValue = 100,
                            PointsRequired = 0,
                            Rarity = "Common",
                            Tier = "bronze"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Character",
                            ColorScheme = "green-bronze",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 15 tasks early",
                            Description = "Complete 15 tasks ahead of schedule",
                            DisplayOrder = 3,
                            IconUrl = "/icons/badges/character-rogue.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Rogue",
                            PointValue = 100,
                            PointsRequired = 0,
                            Rarity = "Common",
                            Tier = "bronze"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Character",
                            ColorScheme = "gold-bronze",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 10 family tasks",
                            Description = "Help family members with 10 tasks",
                            DisplayOrder = 4,
                            IconUrl = "/icons/badges/character-paladin.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Paladin",
                            PointValue = 100,
                            PointsRequired = 0,
                            Rarity = "Common",
                            Tier = "bronze"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Character",
                            ColorScheme = "brown-bronze",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 30 tasks on time",
                            Description = "Complete 30 tasks with precision timing",
                            DisplayOrder = 5,
                            IconUrl = "/icons/badges/character-archer.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Archer",
                            PointValue = 100,
                            PointsRequired = 0,
                            Rarity = "Common",
                            Tier = "bronze"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Character",
                            ColorScheme = "black-bronze",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 20 tasks before 7 AM or after 11 PM",
                            Description = "Complete 20 tasks in stealth mode (early morning/late night)",
                            DisplayOrder = 6,
                            IconUrl = "/icons/badges/character-assassin.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Assassin",
                            PointValue = 150,
                            PointsRequired = 0,
                            Rarity = "Rare",
                            Tier = "bronze"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Character",
                            ColorScheme = "red-silver",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 100 high priority tasks",
                            Description = "Complete 100 high priority tasks",
                            DisplayOrder = 7,
                            IconUrl = "/icons/badges/character-warrior-silver.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Elite Warrior",
                            PointValue = 250,
                            PointsRequired = 0,
                            Rarity = "Rare",
                            Tier = "silver"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Character",
                            ColorScheme = "blue-silver",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 75 learning tasks",
                            Description = "Complete 75 learning tasks",
                            DisplayOrder = 8,
                            IconUrl = "/icons/badges/character-mage-silver.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Archmage",
                            PointValue = 250,
                            PointsRequired = 0,
                            Rarity = "Rare",
                            Tier = "silver"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Character",
                            ColorScheme = "green-silver",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 50 tasks early",
                            Description = "Complete 50 tasks ahead of schedule",
                            DisplayOrder = 9,
                            IconUrl = "/icons/badges/character-rogue-silver.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Master Thief",
                            PointValue = 250,
                            PointsRequired = 0,
                            Rarity = "Rare",
                            Tier = "silver"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Character",
                            ColorScheme = "gold-silver",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 50 family tasks",
                            Description = "Help family members with 50 tasks",
                            DisplayOrder = 10,
                            IconUrl = "/icons/badges/character-paladin-silver.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Crusader",
                            PointValue = 250,
                            PointsRequired = 0,
                            Rarity = "Rare",
                            Tier = "silver"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Character",
                            ColorScheme = "red-gold",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 500 high priority tasks",
                            Description = "Complete 500 high priority tasks",
                            DisplayOrder = 11,
                            IconUrl = "/icons/badges/character-warrior-gold.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Legendary Warrior",
                            PointValue = 500,
                            PointsRequired = 0,
                            Rarity = "Epic",
                            Tier = "gold"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Character",
                            ColorScheme = "blue-gold",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 300 learning tasks",
                            Description = "Complete 300 learning tasks",
                            DisplayOrder = 12,
                            IconUrl = "/icons/badges/character-mage-gold.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Grand Wizard",
                            PointValue = 500,
                            PointsRequired = 0,
                            Rarity = "Epic",
                            Tier = "gold"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Character",
                            ColorScheme = "green-gold",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 200 tasks early",
                            Description = "Complete 200 tasks ahead of schedule",
                            DisplayOrder = 13,
                            IconUrl = "/icons/badges/character-rogue-gold.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Shadow Master",
                            PointValue = 500,
                            PointsRequired = 0,
                            Rarity = "Epic",
                            Tier = "gold"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Character",
                            ColorScheme = "gold-gold",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 200 family tasks",
                            Description = "Help family members with 200 tasks",
                            DisplayOrder = 14,
                            IconUrl = "/icons/badges/character-paladin-gold.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Divine Champion",
                            PointValue = 500,
                            PointsRequired = 0,
                            Rarity = "Epic",
                            Tier = "gold"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Character",
                            ColorScheme = "brown-gold",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 400 tasks on time",
                            Description = "Complete 400 tasks with perfect timing",
                            DisplayOrder = 15,
                            IconUrl = "/icons/badges/character-archer-gold.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Master Archer",
                            PointValue = 500,
                            PointsRequired = 0,
                            Rarity = "Epic",
                            Tier = "gold"
                        },
                        new
                        {
                            Id = 16,
                            Category = "Character",
                            ColorScheme = "black-gold",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 150 tasks before 7 AM or after 11 PM",
                            Description = "Complete 150 stealth tasks",
                            DisplayOrder = 16,
                            IconUrl = "/icons/badges/character-assassin-gold.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Night Emperor",
                            PointValue = 750,
                            PointsRequired = 0,
                            Rarity = "Legendary",
                            Tier = "gold"
                        },
                        new
                        {
                            Id = 17,
                            Category = "Streak",
                            ColorScheme = "orange-bronze",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "7 day completion streak",
                            Description = "Maintain a 7-day task completion streak",
                            DisplayOrder = 17,
                            IconUrl = "/icons/badges/streak-fire-starter.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Fire Starter",
                            PointValue = 100,
                            PointsRequired = 0,
                            Rarity = "Common",
                            Tier = "bronze"
                        },
                        new
                        {
                            Id = 18,
                            Category = "Streak",
                            ColorScheme = "orange-bronze",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "14 day completion streak",
                            Description = "Maintain a 14-day streak",
                            DisplayOrder = 18,
                            IconUrl = "/icons/badges/streak-flame-keeper.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Flame Keeper",
                            PointValue = 150,
                            PointsRequired = 0,
                            Rarity = "Common",
                            Tier = "bronze"
                        },
                        new
                        {
                            Id = 19,
                            Category = "Streak",
                            ColorScheme = "orange-silver",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "30 day completion streak",
                            Description = "Maintain a 30-day streak",
                            DisplayOrder = 19,
                            IconUrl = "/icons/badges/streak-inferno-master.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Inferno Master",
                            PointValue = 300,
                            PointsRequired = 0,
                            Rarity = "Rare",
                            Tier = "silver"
                        },
                        new
                        {
                            Id = 20,
                            Category = "Streak",
                            ColorScheme = "orange-gold",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "100 day completion streak",
                            Description = "Maintain a 100-day streak",
                            DisplayOrder = 20,
                            IconUrl = "/icons/badges/streak-eternal-flame.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Eternal Flame",
                            PointValue = 1000,
                            PointsRequired = 0,
                            Rarity = "Epic",
                            Tier = "gold"
                        },
                        new
                        {
                            Id = 21,
                            Category = "Streak",
                            ColorScheme = "phoenix-silver",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete task after 30+ day break",
                            Description = "Return to complete tasks after a 30+ day break",
                            DisplayOrder = 21,
                            IconUrl = "/icons/badges/streak-phoenix-rising.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Phoenix Rising",
                            PointValue = 200,
                            PointsRequired = 0,
                            Rarity = "Rare",
                            Tier = "silver"
                        },
                        new
                        {
                            Id = 22,
                            Category = "Speed",
                            ColorScheme = "silver-bronze",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 10 tasks under 5 minutes each",
                            Description = "Complete 10 tasks in under 5 minutes each",
                            DisplayOrder = 22,
                            IconUrl = "/icons/badges/speed-quicksilver.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Quicksilver",
                            PointValue = 75,
                            PointsRequired = 0,
                            Rarity = "Common",
                            Tier = "bronze"
                        },
                        new
                        {
                            Id = 23,
                            Category = "Speed",
                            ColorScheme = "yellow-silver",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 25 tasks under 10 minutes each",
                            Description = "Complete 25 tasks in under 10 minutes each",
                            DisplayOrder = 23,
                            IconUrl = "/icons/badges/speed-lightning.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Lightning",
                            PointValue = 200,
                            PointsRequired = 0,
                            Rarity = "Rare",
                            Tier = "silver"
                        },
                        new
                        {
                            Id = 24,
                            Category = "Speed",
                            ColorScheme = "red-gold",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 50 tasks under 15 minutes each",
                            Description = "Complete 50 tasks in under 15 minutes each",
                            DisplayOrder = 24,
                            IconUrl = "/icons/badges/speed-demon.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Speed Demon",
                            PointValue = 400,
                            PointsRequired = 0,
                            Rarity = "Epic",
                            Tier = "gold"
                        },
                        new
                        {
                            Id = 25,
                            Category = "Speed",
                            ColorScheme = "time-platinum",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 100 tasks ahead of estimated time",
                            Description = "Complete 100 tasks ahead of estimated time",
                            DisplayOrder = 25,
                            IconUrl = "/icons/badges/speed-time-lord.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Time Lord",
                            PointValue = 1000,
                            PointsRequired = 0,
                            Rarity = "Legendary",
                            Tier = "platinum"
                        },
                        new
                        {
                            Id = 26,
                            Category = "Social",
                            ColorScheme = "green-bronze",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 10 family tasks",
                            Description = "Complete 10 family tasks",
                            DisplayOrder = 26,
                            IconUrl = "/icons/badges/social-team-player.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Team Player",
                            PointValue = 100,
                            PointsRequired = 0,
                            Rarity = "Common",
                            Tier = "bronze"
                        },
                        new
                        {
                            Id = 27,
                            Category = "Social",
                            ColorScheme = "green-silver",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 50 family tasks",
                            Description = "Complete 50 family tasks",
                            DisplayOrder = 27,
                            IconUrl = "/icons/badges/social-family-hero.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Family Hero",
                            PointValue = 300,
                            PointsRequired = 0,
                            Rarity = "Rare",
                            Tier = "silver"
                        },
                        new
                        {
                            Id = 28,
                            Category = "Social",
                            ColorScheme = "green-gold",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 150 family tasks",
                            Description = "Complete 150 family tasks",
                            DisplayOrder = 28,
                            IconUrl = "/icons/badges/social-unity-champion.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Unity Champion",
                            PointValue = 750,
                            PointsRequired = 0,
                            Rarity = "Epic",
                            Tier = "gold"
                        },
                        new
                        {
                            Id = 29,
                            Category = "Social",
                            ColorScheme = "party-silver",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Create and complete 5 family events",
                            Description = "Create and complete 5 family events",
                            DisplayOrder = 29,
                            IconUrl = "/icons/badges/social-event-master.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Event Master",
                            PointValue = 250,
                            PointsRequired = 0,
                            Rarity = "Rare",
                            Tier = "silver"
                        },
                        new
                        {
                            Id = 30,
                            Category = "Milestone",
                            ColorScheme = "bronze-bronze",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 100 total tasks",
                            Description = "Complete 100 total tasks",
                            DisplayOrder = 30,
                            IconUrl = "/icons/badges/milestone-centurion.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Centurion",
                            PointValue = 200,
                            PointsRequired = 0,
                            Rarity = "Common",
                            Tier = "bronze"
                        },
                        new
                        {
                            Id = 31,
                            Category = "Milestone",
                            ColorScheme = "bronze-silver",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 500 total tasks",
                            Description = "Complete 500 total tasks",
                            DisplayOrder = 31,
                            IconUrl = "/icons/badges/milestone-gladiator.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Gladiator",
                            PointValue = 500,
                            PointsRequired = 0,
                            Rarity = "Rare",
                            Tier = "silver"
                        },
                        new
                        {
                            Id = 32,
                            Category = "Milestone",
                            ColorScheme = "bronze-gold",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 1000 total tasks",
                            Description = "Complete 1000 total tasks",
                            DisplayOrder = 32,
                            IconUrl = "/icons/badges/milestone-champion.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Champion",
                            PointValue = 1000,
                            PointsRequired = 0,
                            Rarity = "Epic",
                            Tier = "gold"
                        },
                        new
                        {
                            Id = 33,
                            Category = "Milestone",
                            ColorScheme = "bronze-platinum",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 2500 total tasks",
                            Description = "Complete 2500 total tasks",
                            DisplayOrder = 33,
                            IconUrl = "/icons/badges/milestone-legend.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Legend",
                            PointValue = 2500,
                            PointsRequired = 0,
                            Rarity = "Legendary",
                            Tier = "platinum"
                        },
                        new
                        {
                            Id = 34,
                            Category = "Milestone",
                            ColorScheme = "rainbow-diamond",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 5000 total tasks",
                            Description = "Complete 5000 total tasks",
                            DisplayOrder = 34,
                            IconUrl = "/icons/badges/milestone-immortal.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Immortal",
                            PointValue = 5000,
                            PointsRequired = 0,
                            Rarity = "Legendary",
                            Tier = "diamond"
                        },
                        new
                        {
                            Id = 35,
                            Category = "Milestone",
                            ColorScheme = "cosmic-onyx",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 10000 total tasks",
                            Description = "Complete 10000 total tasks",
                            DisplayOrder = 35,
                            IconUrl = "/icons/badges/milestone-transcendent.svg",
                            IsActive = true,
                            IsSpecial = false,
                            Name = "Transcendent",
                            PointValue = 10000,
                            PointsRequired = 0,
                            Rarity = "Legendary",
                            Tier = "onyx"
                        },
                        new
                        {
                            Id = 36,
                            Category = "Special",
                            ColorScheme = "red-bronze",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete first task",
                            Description = "Complete your very first task",
                            DisplayOrder = 36,
                            IconUrl = "/icons/badges/special-first-blood.svg",
                            IsActive = true,
                            IsSpecial = true,
                            Name = "First Blood",
                            PointValue = 50,
                            PointsRequired = 0,
                            Rarity = "Common",
                            Tier = "bronze"
                        },
                        new
                        {
                            Id = 37,
                            Category = "Special",
                            ColorScheme = "party-gold",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete task on birthday",
                            Description = "Complete tasks on your birthday",
                            DisplayOrder = 37,
                            IconUrl = "/icons/badges/special-birthday-bash.svg",
                            IsActive = true,
                            IsSpecial = true,
                            Name = "Birthday Bash",
                            PointValue = 500,
                            PointsRequired = 0,
                            Rarity = "Rare",
                            Tier = "gold"
                        },
                        new
                        {
                            Id = 38,
                            Category = "Special",
                            ColorScheme = "fireworks-gold",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete 31 tasks in January",
                            Description = "Complete 31 tasks in January",
                            DisplayOrder = 38,
                            IconUrl = "/icons/badges/special-new-year.svg",
                            IsActive = true,
                            IsSpecial = true,
                            Name = "New Year's Resolution",
                            PointValue = 365,
                            PointsRequired = 0,
                            Rarity = "Epic",
                            Tier = "gold"
                        },
                        new
                        {
                            Id = 39,
                            Category = "Special",
                            ColorScheme = "love-silver",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Criteria = "Complete relationship tasks in February",
                            Description = "Complete romantic/relationship tasks in February",
                            DisplayOrder = 39,
                            IconUrl = "/icons/badges/special-valentine.svg",
                            IsActive = true,
                            IsSpecial = true,
                            Name = "Valentine's Helper",
                            PointValue = 200,
                            PointsRequired = 0,
                            Rarity = "Rare",
                            Tier = "silver"
                        });
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Gamification.UserAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AchievementId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Gamification.UserBadge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AwardNote")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("AwardedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("BadgeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisplayed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBadges");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FamilyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FamilyId");

                    b.HasIndex("RoleId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.ML.AdaptationEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlgorithmVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Confidence")
                        .HasColumnType("float");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("DataPointsUsed")
                        .HasColumnType("int");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<double>("Impact")
                        .HasColumnType("float");

                    b.Property<DateTime?>("MeasuredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SuccessRateAfter")
                        .HasColumnType("float");

                    b.Property<double?>("SuccessRateBefore")
                        .HasColumnType("float");

                    b.Property<string>("UserFeedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("WasSuccessful")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AdaptationEvents");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.ML.RecommendationScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlgorithmVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Confidence")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime?>("FeedbackAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecommendationContext")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecommendationReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SatisfactionRating")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("ScoringFactors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ShownAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int?>("UserFeedback")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("WasShown")
                        .HasColumnType("bit");

                    b.Property<bool>("WasUsed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("RecommendationScores");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.ML.UserLearningProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AdaptationConfidence")
                        .HasColumnType("float");

                    b.Property<double>("AutomationPreference")
                        .HasColumnType("float");

                    b.Property<double>("ChallengeAcceptanceRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("DataPointCount")
                        .HasColumnType("int");

                    b.Property<string>("FocusPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastAdaptationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<double>("LearningVelocity")
                        .HasColumnType("float");

                    b.Property<string>("MotivationFactors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PreferredCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PreferredComplexity")
                        .HasColumnType("int");

                    b.Property<int>("PreferredDuration")
                        .HasColumnType("int");

                    b.Property<int>("PreferredTimeOfDay")
                        .HasColumnType("int");

                    b.Property<double>("ProcrastinationTendency")
                        .HasColumnType("float");

                    b.Property<double>("SocialPreference")
                        .HasColumnType("float");

                    b.Property<string>("SuccessPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("UsageFrequencyPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLearningProfiles");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("Format")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.Property<int?>("TaskItemId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.NotificationPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<bool>("EnableEmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnablePushNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int?>("FamilyId")
                        .HasColumnType("int");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationPreferences");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.ParentalControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string>("BlockedFeatures")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanInviteOthers")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewOtherMembers")
                        .HasColumnType("bit");

                    b.Property<bool>("ChatMonitoringEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("ChildUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<TimeSpan>("DailyTimeLimit")
                        .HasColumnType("time");

                    b.Property<int>("MaxPointsWithoutApproval")
                        .HasColumnType("int");

                    b.Property<int>("ParentUserId")
                        .HasColumnType("int");

                    b.Property<bool>("PointSpendingApprovalRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("ScreenTimeEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("TaskApprovalRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("ChildUserId");

                    b.HasIndex("ParentUserId");

                    b.ToTable("ParentalControls");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.PermissionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChildUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParentUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentalControlId")
                        .HasColumnType("int");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildUserId");

                    b.HasIndex("ParentUserId");

                    b.HasIndex("ParentalControlId");

                    b.ToTable("PermissionRequests");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.PointTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("PointTransactions");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.PriorityMultiplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Multiplier")
                        .HasColumnType("float");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PriorityMultipliers");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.RateLimitTierConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("EndpointPattern")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("ExemptSystemAccounts")
                        .HasColumnType("bit");

                    b.Property<int>("HighLoadReductionPercent")
                        .HasColumnType("int");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsAdaptive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCriticalEndpoint")
                        .HasColumnType("bit");

                    b.Property<int>("MatchPriority")
                        .HasColumnType("int");

                    b.Property<int>("RateLimit")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionTierId")
                        .HasColumnType("int");

                    b.Property<int>("TimeWindowSeconds")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionTierId");

                    b.ToTable("RateLimitTierConfigs");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("ExpiryDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepeating")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReminderTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int?>("RepeatFrequency")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TaskItemId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IconPath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MinimumLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PointCost")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rewards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Customization",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unlock avatar customization options",
                            IconPath = "/icons/rewards/custom-avatar.svg",
                            IsActive = true,
                            MinimumLevel = 2,
                            Name = "Custom Avatar",
                            PointCost = 100
                        },
                        new
                        {
                            Id = 2,
                            Category = "Customization",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unlock premium theme color schemes",
                            IconPath = "/icons/rewards/theme-colors.svg",
                            IsActive = true,
                            MinimumLevel = 3,
                            Name = "Theme Colors",
                            PointCost = 150
                        },
                        new
                        {
                            Id = 3,
                            Category = "Customization",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unlock beautiful profile backgrounds",
                            IconPath = "/icons/rewards/profile-backgrounds.svg",
                            IsActive = true,
                            MinimumLevel = 4,
                            Name = "Profile Backgrounds",
                            PointCost = 200
                        },
                        new
                        {
                            Id = 4,
                            Category = "Customization",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unlock premium typography options",
                            IconPath = "/icons/rewards/custom-fonts.svg",
                            IsActive = true,
                            MinimumLevel = 5,
                            Name = "Custom Fonts",
                            PointCost = 250
                        },
                        new
                        {
                            Id = 5,
                            Category = "Premium",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unlock animated avatar options",
                            IconPath = "/icons/rewards/animated-avatars.svg",
                            IsActive = true,
                            MinimumLevel = 10,
                            Name = "Animated Avatars",
                            PointCost = 500
                        },
                        new
                        {
                            Id = 6,
                            Category = "Premium",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Add magical particle effects",
                            IconPath = "/icons/rewards/particle-effects.svg",
                            IsActive = true,
                            MinimumLevel = 15,
                            Name = "Particle Effects",
                            PointCost = 800
                        },
                        new
                        {
                            Id = 7,
                            Category = "Premium",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Themes that change with progress",
                            IconPath = "/icons/rewards/dynamic-themes.svg",
                            IsActive = true,
                            MinimumLevel = 20,
                            Name = "Dynamic Themes",
                            PointCost = 1000
                        },
                        new
                        {
                            Id = 8,
                            Category = "Audio",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Personalized audio feedback",
                            IconPath = "/icons/rewards/custom-sounds.svg",
                            IsActive = true,
                            MinimumLevel = 12,
                            Name = "Custom Sound Effects",
                            PointCost = 600
                        },
                        new
                        {
                            Id = 9,
                            Category = "Audio",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Epic completion celebrations",
                            IconPath = "/icons/rewards/victory-fanfares.svg",
                            IsActive = true,
                            MinimumLevel = 15,
                            Name = "Victory Fanfares",
                            PointCost = 750
                        },
                        new
                        {
                            Id = 10,
                            Category = "Audio",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Focus-enhancing background audio",
                            IconPath = "/icons/rewards/ambient-sounds.svg",
                            IsActive = true,
                            MinimumLevel = 8,
                            Name = "Ambient Soundscapes",
                            PointCost = 400
                        },
                        new
                        {
                            Id = 11,
                            Category = "Elite",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Futuristic holographic interface",
                            IconPath = "/icons/rewards/holographic-effects.svg",
                            IsActive = true,
                            MinimumLevel = 30,
                            Name = "Holographic Effects",
                            PointCost = 2000
                        },
                        new
                        {
                            Id = 12,
                            Category = "Legendary",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bend space and time in your interface",
                            IconPath = "/icons/rewards/reality-distortion.svg",
                            IsActive = true,
                            MinimumLevel = 50,
                            Name = "Reality Distortion",
                            PointCost = 5000
                        },
                        new
                        {
                            Id = 13,
                            Category = "Mythic",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Multiple reality interface overlay",
                            IconPath = "/icons/rewards/quantum-interface.svg",
                            IsActive = true,
                            MinimumLevel = 75,
                            Name = "Quantum Interface",
                            PointCost = 10000
                        },
                        new
                        {
                            Id = 14,
                            Category = "Cosmic",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Universe-spanning visual themes",
                            IconPath = "/icons/rewards/cosmic-themes.svg",
                            IsActive = true,
                            MinimumLevel = 100,
                            Name = "Cosmic Themes",
                            PointCost = 15000
                        },
                        new
                        {
                            Id = 15,
                            Category = "Transcendent",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Beyond physical avatar forms",
                            IconPath = "/icons/rewards/avatar-transcendence.svg",
                            IsActive = true,
                            MinimumLevel = 150,
                            Name = "Avatar Transcendence",
                            PointCost = 25000
                        },
                        new
                        {
                            Id = 16,
                            Category = "Character",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unlock the Warrior character class",
                            IconPath = "/icons/rewards/warrior-unlock.svg",
                            IsActive = true,
                            MinimumLevel = 5,
                            Name = "Warrior Class",
                            PointCost = 250
                        },
                        new
                        {
                            Id = 17,
                            Category = "Character",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unlock the Mage character class",
                            IconPath = "/icons/rewards/mage-unlock.svg",
                            IsActive = true,
                            MinimumLevel = 8,
                            Name = "Mage Class",
                            PointCost = 400
                        },
                        new
                        {
                            Id = 18,
                            Category = "Character",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unlock the Guardian character class",
                            IconPath = "/icons/rewards/guardian-unlock.svg",
                            IsActive = true,
                            MinimumLevel = 12,
                            Name = "Guardian Class",
                            PointCost = 600
                        },
                        new
                        {
                            Id = 19,
                            Category = "Character",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unlock the Speedster character class",
                            IconPath = "/icons/rewards/speedster-unlock.svg",
                            IsActive = true,
                            MinimumLevel = 15,
                            Name = "Speedster Class",
                            PointCost = 800
                        },
                        new
                        {
                            Id = 20,
                            Category = "Character",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unlock the Healer character class",
                            IconPath = "/icons/rewards/healer-unlock.svg",
                            IsActive = true,
                            MinimumLevel = 18,
                            Name = "Healer Class",
                            PointCost = 1000
                        },
                        new
                        {
                            Id = 21,
                            Category = "Boost",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Double points for next 5 high-priority tasks",
                            IconPath = "/icons/rewards/priority-boost.svg",
                            IsActive = true,
                            MinimumLevel = 6,
                            Name = "Priority Boost",
                            PointCost = 300,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 22,
                            Category = "Boost",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Protect your streak for 3 days",
                            IconPath = "/icons/rewards/streak-shield.svg",
                            IsActive = true,
                            MinimumLevel = 10,
                            Name = "Streak Shield",
                            PointCost = 500,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 23,
                            Category = "Boost",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Double XP for 24 hours",
                            IconPath = "/icons/rewards/xp-multiplier.svg",
                            IsActive = true,
                            MinimumLevel = 8,
                            Name = "XP Multiplier",
                            PointCost = 400,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 24,
                            Category = "Boost",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Enhanced focus session benefits",
                            IconPath = "/icons/rewards/focus-enhancer.svg",
                            IsActive = true,
                            MinimumLevel = 7,
                            Name = "Focus Enhancer",
                            PointCost = 350,
                            Quantity = 15
                        },
                        new
                        {
                            Id = 25,
                            Category = "Boost",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bonus points for fast completion",
                            IconPath = "/icons/rewards/speed-boost.svg",
                            IsActive = true,
                            MinimumLevel = 5,
                            Name = "Speed Boost",
                            PointCost = 250,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 26,
                            Category = "Collectible",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rare digital trophy for your collection",
                            IconPath = "/icons/rewards/golden-trophy.svg",
                            IsActive = true,
                            MinimumLevel = 30,
                            Name = "Golden Trophy",
                            PointCost = 2000,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 27,
                            Category = "Collectible",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mystical crystal containing ancient wisdom",
                            IconPath = "/icons/rewards/crystal-orb.svg",
                            IsActive = true,
                            MinimumLevel = 35,
                            Name = "Crystal Orb",
                            PointCost = 3000,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 28,
                            Category = "Collectible",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Feather from the legendary Phoenix",
                            IconPath = "/icons/rewards/phoenix-feather.svg",
                            IsActive = true,
                            MinimumLevel = 50,
                            Name = "Phoenix Feather",
                            PointCost = 5000,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 29,
                            Category = "Collectible",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Scale from an ancient dragon",
                            IconPath = "/icons/rewards/dragon-scale.svg",
                            IsActive = true,
                            MinimumLevel = 60,
                            Name = "Dragon Scale",
                            PointCost = 7500,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 30,
                            Category = "Cosmic",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Stardust from the birth of universe",
                            IconPath = "/icons/rewards/cosmic-dust.svg",
                            IsActive = true,
                            MinimumLevel = 75,
                            Name = "Cosmic Dust",
                            PointCost = 10000,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Security.BehavioralAnalytics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ActionsPerMinute")
                        .HasColumnType("int");

                    b.Property<string>("AnomalyReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("AnomalyScore")
                        .HasColumnType("float");

                    b.Property<string>("BehaviorMetadata")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Browser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("DataVolumeAccessed")
                        .HasColumnType("int");

                    b.Property<double>("DeviationFromBaseline")
                        .HasColumnType("float");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsAnomalous")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHighVelocity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewDevice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewLocation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOffHours")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOutsideNormalPattern")
                        .HasColumnType("bit");

                    b.Property<string>("OperatingSystem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResourceAccessed")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<TimeSpan>("SessionDuration")
                        .HasColumnType("time");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BehavioralAnalytics");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Security.ThreatIntelligence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalMetadata")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ConfidenceScore")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("FirstSeen")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("ISP")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlacklisted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWhitelisted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReportCount")
                        .HasColumnType("int");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ThreatSource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ThreatType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.ToTable("ThreatIntelligence");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.SecurityAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Details")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspicious")
                        .HasColumnType("bit");

                    b.Property<string>("Resource")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Severity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SecurityAuditLogs");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.SecurityMetrics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MetricType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Severity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("SecurityMetrics");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.SubscriptionTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BypassStandardRateLimits")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("DailyApiQuota")
                        .HasColumnType("int");

                    b.Property<int>("DefaultRateLimit")
                        .HasColumnType("int");

                    b.Property<int>("DefaultTimeWindowSeconds")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsSystemTier")
                        .HasColumnType("bit");

                    b.Property<int>("MaxConcurrentConnections")
                        .HasColumnType("int");

                    b.Property<decimal>("MonthlyCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.ToTable("SubscriptionTiers");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.SystemHealthMetrics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsHealthy")
                        .HasColumnType("bit");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("ThresholdCritical")
                        .HasColumnType("float");

                    b.Property<double?>("ThresholdWarning")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("SystemHealthMetrics");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TaskAutomationRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Actions")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Conditions")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastTriggered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<decimal>("SuccessRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("TriggerCount")
                        .HasColumnType("int");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("TaskAutomationRules");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActualTimeSpentMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedToFamilyMemberId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedToId")
                        .HasColumnType("int");

                    b.Property<string>("BoardColumn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BoardId")
                        .HasColumnType("int");

                    b.Property<int?>("BoardOrder")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EstimatedTimeMinutes")
                        .HasColumnType("int");

                    b.Property<int?>("FamilyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastRecurrence")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextRecurrence")
                        .HasColumnType("datetime2");

                    b.Property<double?>("PositionX")
                        .HasColumnType("float");

                    b.Property<double?>("PositionY")
                        .HasColumnType("float");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("int");

                    b.Property<string>("RecurringPattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("AssignedByUserId");

                    b.HasIndex("AssignedToFamilyMemberId");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("BoardId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TaskTag", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("TaskId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TaskTags");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TaskTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AutomationRules")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("AverageCompletionTimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConditionalLogic")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("int");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAutomated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemTemplate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUsedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MarketplaceDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Prerequisites")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PurchaseCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SuccessRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SuccessStories")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("TemplateCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TemplateData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TriggerConditions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ValueProposition")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("WorkflowSteps")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkflowVersion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskTemplates");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TemplateCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorHex")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IconName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.ToTable("TemplateCategories");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TemplateMarketplace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApproverId")
                        .HasColumnType("int");

                    b.Property<string>("ChangeLog")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("MinimumRating")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PublishedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateMarketplace");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TemplatePurchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PointsSpent")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("TemplatePurchases");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TemplateUsageAnalytics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CompletionTimeMinutes")
                        .HasColumnType("int");

                    b.Property<decimal>("EfficiencyScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Feedback")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<int>("TasksCompleted")
                        .HasColumnType("int");

                    b.Property<int>("TasksCreated")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("TemplateUsageAnalytics");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TimeRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ParentalControlId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ParentalControlId");

                    b.ToTable("TimeRanges");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeGroup")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Encrypted field - PII");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Encrypted field - PII");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Encrypted field - PII");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryFamilyId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email_Unique");

                    b.HasIndex("PrimaryFamilyId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username_Unique");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.UserApiQuota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiCallsUsedToday")
                        .HasColumnType("int");

                    b.Property<bool>("HasReceivedQuotaWarning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExemptFromQuota")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastResetTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("LastUpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("MaxDailyApiCalls")
                        .HasColumnType("int");

                    b.Property<int>("QuotaWarningThresholdPercent")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionTierId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionTierId");

                    b.HasIndex("UserId");

                    b.ToTable("UserApiQuotas");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.UserChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentProgress")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrolledAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRewardClaimed")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChallenges");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.UserDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActiveAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDevices");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.UserProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterLevel")
                        .HasColumnType("int");

                    b.Property<int>("CharacterXP")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CurrentCharacterClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentPoints")
                        .HasColumnType("int");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("int");

                    b.Property<int>("NextLevelThreshold")
                        .HasColumnType("int");

                    b.Property<int>("TotalPointsEarned")
                        .HasColumnType("int");

                    b.Property<string>("UnlockedCharacters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserTier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserProgresses");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.UserReward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RedeemedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RewardId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RewardId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRewards");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("DeviceType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspicious")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("OperatingSystem")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecurityNotes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("TerminatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TerminationReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.WorkflowStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Conditions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Configuration")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Dependencies")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EstimatedDurationMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.Property<string>("StepType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("WorkflowSteps");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Analytics.AnalyticsQuery", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Analytics.DashboardWidget", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Analytics.DataExportRequest", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Analytics.SavedFilter", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Board", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", null)
                        .WithMany("Boards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.BoardColumn", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.Board", "Board")
                        .WithMany("Columns")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.BoardSettings", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.Board", "Board")
                        .WithOne("Settings")
                        .HasForeignKey("TaskTrackerAPI.Models.BoardSettings", "BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.BoardTemplate", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.BoardTemplateColumn", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.BoardTemplate", "BoardTemplate")
                        .WithMany("DefaultColumns")
                        .HasForeignKey("BoardTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardTemplate");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Category", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.ChallengeProgress", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.Challenge", "Challenge")
                        .WithMany("ChallengeProgresses")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.ChecklistItem", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.TaskItem", "Task")
                        .WithMany("ChecklistItems")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.ChecklistTemplateItem", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.TaskTemplate", "TaskTemplate")
                        .WithMany("ChecklistItems")
                        .HasForeignKey("TaskTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskTemplate");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Distraction", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.FocusSession", "FocusSession")
                        .WithMany("Distractions")
                        .HasForeignKey("FocusSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FocusSession");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Family", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyAchievement", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyAchievementMember", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.FamilyAchievement", "Achievement")
                        .WithMany("MemberContributions")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.FamilyMember", "Member")
                        .WithMany()
                        .HasForeignKey("FamilyMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyActivity", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.User", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId");

                    b.Navigation("Actor");

                    b.Navigation("Family");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyCalendarEvent", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Family");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyEventAttendee", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.FamilyCalendarEvent", "Event")
                        .WithMany("Attendees")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.FamilyMember", "FamilyMember")
                        .WithMany()
                        .HasForeignKey("FamilyMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("FamilyMember");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyEventReminder", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.FamilyCalendarEvent", "Event")
                        .WithMany("Reminders")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyMember", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.Family", "Family")
                        .WithMany("Members")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.FamilyRole", "Role")
                        .WithMany("Members")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.User", null)
                        .WithMany("FamilyMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyMemberAvailability", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.FamilyMember", "FamilyMember")
                        .WithMany()
                        .HasForeignKey("FamilyMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FamilyMember");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyRolePermission", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.FamilyRole", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FocusSession", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.TaskItem", "TaskItem")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Gamification.Achievement", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId");

                    b.Navigation("Family");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Gamification.UserAchievement", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.Gamification.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Gamification.UserBadge", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.Gamification.Badge", "Badge")
                        .WithMany("UserBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Invitation", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.FamilyRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Family");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.ML.AdaptationEvent", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.ML.RecommendationScore", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.TaskTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.ML.UserLearningProfile", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Note", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.TaskItem", "TaskItem")
                        .WithMany()
                        .HasForeignKey("TaskItemId");

                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Notification", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.NotificationPreference", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId");

                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.ParentalControl", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "Child")
                        .WithMany()
                        .HasForeignKey("ChildUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.User", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.PermissionRequest", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "Child")
                        .WithMany()
                        .HasForeignKey("ChildUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.User", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.ParentalControl", null)
                        .WithMany("PermissionRequests")
                        .HasForeignKey("ParentalControlId");

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.PointTransaction", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.TaskItem", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TaskTrackerAPI.Models.TaskTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.RateLimitTierConfig", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.SubscriptionTier", "SubscriptionTier")
                        .WithMany()
                        .HasForeignKey("SubscriptionTierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionTier");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.RefreshToken", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Reminder", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.TaskItem", "TaskItem")
                        .WithMany()
                        .HasForeignKey("TaskItemId");

                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.SecurityAuditLog", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Tag", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TaskAutomationRule", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.TaskTemplate", "Template")
                        .WithMany("AutomationRulesCollection")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TaskItem", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TaskTrackerAPI.Models.User", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TaskTrackerAPI.Models.FamilyMember", "AssignedToFamilyMember")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedToFamilyMemberId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TaskTrackerAPI.Models.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TaskTrackerAPI.Models.Board", "Board")
                        .WithMany("Tasks")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TaskTrackerAPI.Models.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TaskTrackerAPI.Models.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("AssignedByUser");

                    b.Navigation("AssignedTo");

                    b.Navigation("AssignedToFamilyMember");

                    b.Navigation("Board");

                    b.Navigation("Category");

                    b.Navigation("Family");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TaskTag", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.Tag", "Tag")
                        .WithMany("TaskTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.TaskItem", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TaskTemplate", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.TemplateCategory", null)
                        .WithMany("Templates")
                        .HasForeignKey("TemplateCategoryId");

                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TemplateMarketplace", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId");

                    b.HasOne("TaskTrackerAPI.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("TaskTrackerAPI.Models.TaskTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Creator");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TemplatePurchase", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.TaskTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TemplateUsageAnalytics", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.TaskTemplate", "Template")
                        .WithMany("UsageAnalytics")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TimeRange", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.ParentalControl", "ParentalControl")
                        .WithMany("AllowedHours")
                        .HasForeignKey("ParentalControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentalControl");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.User", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.Family", "PrimaryFamily")
                        .WithMany("PrimaryFamilyUsers")
                        .HasForeignKey("PrimaryFamilyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PrimaryFamily");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.UserApiQuota", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.SubscriptionTier", "SubscriptionTier")
                        .WithMany()
                        .HasForeignKey("SubscriptionTierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionTier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.UserChallenge", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.Challenge", "Challenge")
                        .WithMany()
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.UserDevice", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.UserProgress", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.UserReward", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.Reward", "Reward")
                        .WithMany("UserRewards")
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reward");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.UserSession", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.WorkflowStep", b =>
                {
                    b.HasOne("TaskTrackerAPI.Models.TaskTemplate", "Template")
                        .WithMany("WorkflowStepsCollection")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Board", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Settings");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.BoardTemplate", b =>
                {
                    b.Navigation("DefaultColumns");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Category", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Challenge", b =>
                {
                    b.Navigation("ChallengeProgresses");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Family", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("PrimaryFamilyUsers");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyAchievement", b =>
                {
                    b.Navigation("MemberContributions");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyCalendarEvent", b =>
                {
                    b.Navigation("Attendees");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyMember", b =>
                {
                    b.Navigation("AssignedTasks");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FamilyRole", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.FocusSession", b =>
                {
                    b.Navigation("Distractions");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Gamification.Achievement", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Gamification.Badge", b =>
                {
                    b.Navigation("UserBadges");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.ParentalControl", b =>
                {
                    b.Navigation("AllowedHours");

                    b.Navigation("PermissionRequests");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Reward", b =>
                {
                    b.Navigation("UserRewards");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.Tag", b =>
                {
                    b.Navigation("TaskTags");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TaskItem", b =>
                {
                    b.Navigation("ChecklistItems");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TaskTemplate", b =>
                {
                    b.Navigation("AutomationRulesCollection");

                    b.Navigation("ChecklistItems");

                    b.Navigation("UsageAnalytics");

                    b.Navigation("WorkflowStepsCollection");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.TemplateCategory", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("TaskTrackerAPI.Models.User", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("Devices");

                    b.Navigation("FamilyMembers");

                    b.Navigation("Tasks");

                    b.Navigation("UserAchievements");
                });
#pragma warning restore 612, 618
        }
    }
}
