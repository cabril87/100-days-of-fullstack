/*
 * Copyright (c) 2025 Carlos Abril Jr
 * All rights reserved.
 *
 * This source code is licensed under the Business Source License 1.1
 * found in the LICENSE file in the root directory of this source tree.
 *
 * This file may not be used, copied, modified, or distributed except in
 * accordance with the terms contained in the LICENSE file.
 */
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace TaskTrackerAPI.Models.BackgroundServices
{
    /// <summary>
    /// Tracks the status and health of background services
    /// </summary>
    public class BackgroundServiceStatus
    {
        [Key]
        public int Id { get; set; }
        
        [Required]
        [MaxLength(100)]
        public string ServiceName { get; set; } = string.Empty;
        
        [Required]
        [MaxLength(50)]
        public string Status { get; set; } = string.Empty; // Running, Stopped, Error, Idle
        
        [MaxLength(500)]
        public string? Message { get; set; }
        
        public DateTime? LastRun { get; set; }
        public DateTime? NextRun { get; set; }
        public bool IsHealthy { get; set; } = true;
        public int ExecutionCount { get; set; } = 0;
        public int SuccessCount { get; set; } = 0;
        public int ErrorCount { get; set; } = 0;
        
        [Column(TypeName = "decimal(5,2)")]
        public decimal SuccessRate { get; set; } = 0m;
        
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;
    }

    /// <summary>
    /// Records individual executions of background services
    /// </summary>
    public class BackgroundServiceExecution
    {
        [Key]
        public int Id { get; set; }
        
        [Required]
        [MaxLength(100)]
        public string ServiceName { get; set; } = string.Empty;
        
        public DateTime ExecutionTime { get; set; } = DateTime.UtcNow;
        public bool Success { get; set; }
        
        [MaxLength(1000)]
        public string? Details { get; set; }
        
        public int? RecordsProcessed { get; set; }
        public TimeSpan? Duration { get; set; }
        
        [MaxLength(2000)]
        public string? ErrorMessage { get; set; }
    }

    /// <summary>
    /// System maintenance notifications for scheduled or emergency maintenance
    /// </summary>
    public class SystemMaintenanceNotification
    {
        [Key]
        public int Id { get; set; }
        
        [Required]
        [MaxLength(200)]
        public string Title { get; set; } = string.Empty;
        
        [Required]
        [MaxLength(1000)]
        public string Message { get; set; } = string.Empty;
        
        [Required]
        [MaxLength(50)]
        public string Type { get; set; } = string.Empty; // Scheduled, Emergency, Completed
        
        [Required]
        [MaxLength(20)]
        public string Priority { get; set; } = string.Empty; // Low, Medium, High, Critical
        
        public DateTime? ScheduledStart { get; set; }
        public DateTime? ScheduledEnd { get; set; }
        public bool IsActive { get; set; } = true;
        
        [MaxLength(500)]
        public string? AffectedServices { get; set; }
        
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime? UpdatedAt { get; set; }
    }

    /// <summary>
    /// System optimization recommendations generated by background analysis
    /// </summary>
    public class SystemOptimizationRecommendation
    {
        [Key]
        public int Id { get; set; }
        
        [Required]
        [MaxLength(50)]
        public string Category { get; set; } = string.Empty; // Performance, Security, Maintenance, Resource
        
        [Required]
        [MaxLength(200)]
        public string Title { get; set; } = string.Empty;
        
        [Required]
        [MaxLength(1000)]
        public string Description { get; set; } = string.Empty;
        
        [Required]
        [MaxLength(2000)]
        public string Recommendation { get; set; } = string.Empty;
        
        [Required]
        [MaxLength(20)]
        public string Priority { get; set; } = string.Empty; // Low, Medium, High, Critical
        
        [Required]
        [MaxLength(20)]
        public string Impact { get; set; } = string.Empty; // Low, Medium, High
        
        public bool IsImplemented { get; set; } = false;
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime? ImplementedAt { get; set; }
        
        [MaxLength(1000)]
        public string? ImplementationNotes { get; set; }
    }
} 